
SensorControllerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800503c  0800503c  0000603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  080050e8  080050e8  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e8  080050e8  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080050f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000001c  0800510c  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200001ac  0800510c  000071ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c046  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dae  00000000  00000000  0001308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00014e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  00015b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa1  00000000  00000000  000164f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d80e  00000000  00000000  0002f494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d13  00000000  00000000  0003cca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce9b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f90  00000000  00000000  000ce9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d1988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005024 	.word	0x08005024

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08005024 	.word	0x08005024

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0244      	lsls	r4, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0e      	adds	r6, r1, #0
 8000230:	0a64      	lsrs	r4, r4, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc5      	lsrs	r5, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d03c      	beq.n	80002b4 <__aeabi_fdiv+0x94>
 800023a:	2fff      	cmp	r7, #255	@ 0xff
 800023c:	d042      	beq.n	80002c4 <__aeabi_fdiv+0xa4>
 800023e:	2300      	movs	r3, #0
 8000240:	2280      	movs	r2, #128	@ 0x80
 8000242:	4699      	mov	r9, r3
 8000244:	469a      	mov	sl, r3
 8000246:	00e4      	lsls	r4, r4, #3
 8000248:	04d2      	lsls	r2, r2, #19
 800024a:	4314      	orrs	r4, r2
 800024c:	3f7f      	subs	r7, #127	@ 0x7f
 800024e:	0273      	lsls	r3, r6, #9
 8000250:	0a5b      	lsrs	r3, r3, #9
 8000252:	4698      	mov	r8, r3
 8000254:	0073      	lsls	r3, r6, #1
 8000256:	0e1b      	lsrs	r3, r3, #24
 8000258:	0ff6      	lsrs	r6, r6, #31
 800025a:	2b00      	cmp	r3, #0
 800025c:	d01b      	beq.n	8000296 <__aeabi_fdiv+0x76>
 800025e:	2bff      	cmp	r3, #255	@ 0xff
 8000260:	d013      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000262:	4642      	mov	r2, r8
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	00d2      	lsls	r2, r2, #3
 8000268:	04c9      	lsls	r1, r1, #19
 800026a:	4311      	orrs	r1, r2
 800026c:	4688      	mov	r8, r1
 800026e:	2000      	movs	r0, #0
 8000270:	3b7f      	subs	r3, #127	@ 0x7f
 8000272:	0029      	movs	r1, r5
 8000274:	1aff      	subs	r7, r7, r3
 8000276:	464b      	mov	r3, r9
 8000278:	4071      	eors	r1, r6
 800027a:	b2c9      	uxtb	r1, r1
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e0b5      	b.n	80003ee <__aeabi_fdiv+0x1ce>
 8000282:	4a74      	ldr	r2, [pc, #464]	@ (8000454 <__aeabi_fdiv+0x234>)
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	58d3      	ldr	r3, [r2, r3]
 8000288:	469f      	mov	pc, r3
 800028a:	4643      	mov	r3, r8
 800028c:	2b00      	cmp	r3, #0
 800028e:	d13f      	bne.n	8000310 <__aeabi_fdiv+0xf0>
 8000290:	3fff      	subs	r7, #255	@ 0xff
 8000292:	3302      	adds	r3, #2
 8000294:	e003      	b.n	800029e <__aeabi_fdiv+0x7e>
 8000296:	4643      	mov	r3, r8
 8000298:	2b00      	cmp	r3, #0
 800029a:	d12d      	bne.n	80002f8 <__aeabi_fdiv+0xd8>
 800029c:	2301      	movs	r3, #1
 800029e:	0029      	movs	r1, r5
 80002a0:	464a      	mov	r2, r9
 80002a2:	4071      	eors	r1, r6
 80002a4:	b2c9      	uxtb	r1, r1
 80002a6:	431a      	orrs	r2, r3
 80002a8:	2a0e      	cmp	r2, #14
 80002aa:	d838      	bhi.n	800031e <__aeabi_fdiv+0xfe>
 80002ac:	486a      	ldr	r0, [pc, #424]	@ (8000458 <__aeabi_fdiv+0x238>)
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	5882      	ldr	r2, [r0, r2]
 80002b2:	4697      	mov	pc, r2
 80002b4:	2c00      	cmp	r4, #0
 80002b6:	d113      	bne.n	80002e0 <__aeabi_fdiv+0xc0>
 80002b8:	2304      	movs	r3, #4
 80002ba:	4699      	mov	r9, r3
 80002bc:	3b03      	subs	r3, #3
 80002be:	2700      	movs	r7, #0
 80002c0:	469a      	mov	sl, r3
 80002c2:	e7c4      	b.n	800024e <__aeabi_fdiv+0x2e>
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d105      	bne.n	80002d4 <__aeabi_fdiv+0xb4>
 80002c8:	2308      	movs	r3, #8
 80002ca:	4699      	mov	r9, r3
 80002cc:	3b06      	subs	r3, #6
 80002ce:	27ff      	movs	r7, #255	@ 0xff
 80002d0:	469a      	mov	sl, r3
 80002d2:	e7bc      	b.n	800024e <__aeabi_fdiv+0x2e>
 80002d4:	230c      	movs	r3, #12
 80002d6:	4699      	mov	r9, r3
 80002d8:	3b09      	subs	r3, #9
 80002da:	27ff      	movs	r7, #255	@ 0xff
 80002dc:	469a      	mov	sl, r3
 80002de:	e7b6      	b.n	800024e <__aeabi_fdiv+0x2e>
 80002e0:	0020      	movs	r0, r4
 80002e2:	f000 feaf 	bl	8001044 <__clzsi2>
 80002e6:	2776      	movs	r7, #118	@ 0x76
 80002e8:	1f43      	subs	r3, r0, #5
 80002ea:	409c      	lsls	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	427f      	negs	r7, r7
 80002f0:	4699      	mov	r9, r3
 80002f2:	469a      	mov	sl, r3
 80002f4:	1a3f      	subs	r7, r7, r0
 80002f6:	e7aa      	b.n	800024e <__aeabi_fdiv+0x2e>
 80002f8:	4640      	mov	r0, r8
 80002fa:	f000 fea3 	bl	8001044 <__clzsi2>
 80002fe:	4642      	mov	r2, r8
 8000300:	1f43      	subs	r3, r0, #5
 8000302:	409a      	lsls	r2, r3
 8000304:	2376      	movs	r3, #118	@ 0x76
 8000306:	425b      	negs	r3, r3
 8000308:	1a1b      	subs	r3, r3, r0
 800030a:	4690      	mov	r8, r2
 800030c:	2000      	movs	r0, #0
 800030e:	e7b0      	b.n	8000272 <__aeabi_fdiv+0x52>
 8000310:	2303      	movs	r3, #3
 8000312:	464a      	mov	r2, r9
 8000314:	431a      	orrs	r2, r3
 8000316:	4691      	mov	r9, r2
 8000318:	2003      	movs	r0, #3
 800031a:	33fc      	adds	r3, #252	@ 0xfc
 800031c:	e7a9      	b.n	8000272 <__aeabi_fdiv+0x52>
 800031e:	000d      	movs	r5, r1
 8000320:	20ff      	movs	r0, #255	@ 0xff
 8000322:	2200      	movs	r2, #0
 8000324:	05c0      	lsls	r0, r0, #23
 8000326:	07ed      	lsls	r5, r5, #31
 8000328:	4310      	orrs	r0, r2
 800032a:	4328      	orrs	r0, r5
 800032c:	bce0      	pop	{r5, r6, r7}
 800032e:	46ba      	mov	sl, r7
 8000330:	46b1      	mov	r9, r6
 8000332:	46a8      	mov	r8, r5
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	000d      	movs	r5, r1
 8000338:	2000      	movs	r0, #0
 800033a:	2200      	movs	r2, #0
 800033c:	e7f2      	b.n	8000324 <__aeabi_fdiv+0x104>
 800033e:	4653      	mov	r3, sl
 8000340:	2b02      	cmp	r3, #2
 8000342:	d0ed      	beq.n	8000320 <__aeabi_fdiv+0x100>
 8000344:	2b03      	cmp	r3, #3
 8000346:	d033      	beq.n	80003b0 <__aeabi_fdiv+0x190>
 8000348:	46a0      	mov	r8, r4
 800034a:	2b01      	cmp	r3, #1
 800034c:	d105      	bne.n	800035a <__aeabi_fdiv+0x13a>
 800034e:	2000      	movs	r0, #0
 8000350:	2200      	movs	r2, #0
 8000352:	e7e7      	b.n	8000324 <__aeabi_fdiv+0x104>
 8000354:	0035      	movs	r5, r6
 8000356:	2803      	cmp	r0, #3
 8000358:	d07a      	beq.n	8000450 <__aeabi_fdiv+0x230>
 800035a:	003b      	movs	r3, r7
 800035c:	337f      	adds	r3, #127	@ 0x7f
 800035e:	2b00      	cmp	r3, #0
 8000360:	dd2d      	ble.n	80003be <__aeabi_fdiv+0x19e>
 8000362:	4642      	mov	r2, r8
 8000364:	0752      	lsls	r2, r2, #29
 8000366:	d007      	beq.n	8000378 <__aeabi_fdiv+0x158>
 8000368:	220f      	movs	r2, #15
 800036a:	4641      	mov	r1, r8
 800036c:	400a      	ands	r2, r1
 800036e:	2a04      	cmp	r2, #4
 8000370:	d002      	beq.n	8000378 <__aeabi_fdiv+0x158>
 8000372:	2204      	movs	r2, #4
 8000374:	4694      	mov	ip, r2
 8000376:	44e0      	add	r8, ip
 8000378:	4642      	mov	r2, r8
 800037a:	0112      	lsls	r2, r2, #4
 800037c:	d505      	bpl.n	800038a <__aeabi_fdiv+0x16a>
 800037e:	4642      	mov	r2, r8
 8000380:	4b36      	ldr	r3, [pc, #216]	@ (800045c <__aeabi_fdiv+0x23c>)
 8000382:	401a      	ands	r2, r3
 8000384:	003b      	movs	r3, r7
 8000386:	4690      	mov	r8, r2
 8000388:	3380      	adds	r3, #128	@ 0x80
 800038a:	2bfe      	cmp	r3, #254	@ 0xfe
 800038c:	dcc8      	bgt.n	8000320 <__aeabi_fdiv+0x100>
 800038e:	4642      	mov	r2, r8
 8000390:	0192      	lsls	r2, r2, #6
 8000392:	0a52      	lsrs	r2, r2, #9
 8000394:	b2d8      	uxtb	r0, r3
 8000396:	e7c5      	b.n	8000324 <__aeabi_fdiv+0x104>
 8000398:	2280      	movs	r2, #128	@ 0x80
 800039a:	2500      	movs	r5, #0
 800039c:	20ff      	movs	r0, #255	@ 0xff
 800039e:	03d2      	lsls	r2, r2, #15
 80003a0:	e7c0      	b.n	8000324 <__aeabi_fdiv+0x104>
 80003a2:	2280      	movs	r2, #128	@ 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	4214      	tst	r4, r2
 80003a8:	d002      	beq.n	80003b0 <__aeabi_fdiv+0x190>
 80003aa:	4643      	mov	r3, r8
 80003ac:	4213      	tst	r3, r2
 80003ae:	d049      	beq.n	8000444 <__aeabi_fdiv+0x224>
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	03d2      	lsls	r2, r2, #15
 80003b4:	4322      	orrs	r2, r4
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	20ff      	movs	r0, #255	@ 0xff
 80003ba:	0a52      	lsrs	r2, r2, #9
 80003bc:	e7b2      	b.n	8000324 <__aeabi_fdiv+0x104>
 80003be:	2201      	movs	r2, #1
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	2b1b      	cmp	r3, #27
 80003c4:	dcc3      	bgt.n	800034e <__aeabi_fdiv+0x12e>
 80003c6:	4642      	mov	r2, r8
 80003c8:	40da      	lsrs	r2, r3
 80003ca:	4643      	mov	r3, r8
 80003cc:	379e      	adds	r7, #158	@ 0x9e
 80003ce:	40bb      	lsls	r3, r7
 80003d0:	1e59      	subs	r1, r3, #1
 80003d2:	418b      	sbcs	r3, r1
 80003d4:	431a      	orrs	r2, r3
 80003d6:	0753      	lsls	r3, r2, #29
 80003d8:	d004      	beq.n	80003e4 <__aeabi_fdiv+0x1c4>
 80003da:	230f      	movs	r3, #15
 80003dc:	4013      	ands	r3, r2
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d000      	beq.n	80003e4 <__aeabi_fdiv+0x1c4>
 80003e2:	3204      	adds	r2, #4
 80003e4:	0153      	lsls	r3, r2, #5
 80003e6:	d529      	bpl.n	800043c <__aeabi_fdiv+0x21c>
 80003e8:	2001      	movs	r0, #1
 80003ea:	2200      	movs	r2, #0
 80003ec:	e79a      	b.n	8000324 <__aeabi_fdiv+0x104>
 80003ee:	4642      	mov	r2, r8
 80003f0:	0163      	lsls	r3, r4, #5
 80003f2:	0155      	lsls	r5, r2, #5
 80003f4:	42ab      	cmp	r3, r5
 80003f6:	d215      	bcs.n	8000424 <__aeabi_fdiv+0x204>
 80003f8:	201b      	movs	r0, #27
 80003fa:	2200      	movs	r2, #0
 80003fc:	3f01      	subs	r7, #1
 80003fe:	2601      	movs	r6, #1
 8000400:	001c      	movs	r4, r3
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2c00      	cmp	r4, #0
 8000408:	db01      	blt.n	800040e <__aeabi_fdiv+0x1ee>
 800040a:	429d      	cmp	r5, r3
 800040c:	d801      	bhi.n	8000412 <__aeabi_fdiv+0x1f2>
 800040e:	1b5b      	subs	r3, r3, r5
 8000410:	4332      	orrs	r2, r6
 8000412:	3801      	subs	r0, #1
 8000414:	2800      	cmp	r0, #0
 8000416:	d1f3      	bne.n	8000400 <__aeabi_fdiv+0x1e0>
 8000418:	1e58      	subs	r0, r3, #1
 800041a:	4183      	sbcs	r3, r0
 800041c:	4313      	orrs	r3, r2
 800041e:	4698      	mov	r8, r3
 8000420:	000d      	movs	r5, r1
 8000422:	e79a      	b.n	800035a <__aeabi_fdiv+0x13a>
 8000424:	201a      	movs	r0, #26
 8000426:	2201      	movs	r2, #1
 8000428:	1b5b      	subs	r3, r3, r5
 800042a:	e7e8      	b.n	80003fe <__aeabi_fdiv+0x1de>
 800042c:	3b02      	subs	r3, #2
 800042e:	425a      	negs	r2, r3
 8000430:	4153      	adcs	r3, r2
 8000432:	425b      	negs	r3, r3
 8000434:	0035      	movs	r5, r6
 8000436:	2200      	movs	r2, #0
 8000438:	b2d8      	uxtb	r0, r3
 800043a:	e773      	b.n	8000324 <__aeabi_fdiv+0x104>
 800043c:	0192      	lsls	r2, r2, #6
 800043e:	2000      	movs	r0, #0
 8000440:	0a52      	lsrs	r2, r2, #9
 8000442:	e76f      	b.n	8000324 <__aeabi_fdiv+0x104>
 8000444:	431a      	orrs	r2, r3
 8000446:	0252      	lsls	r2, r2, #9
 8000448:	0035      	movs	r5, r6
 800044a:	20ff      	movs	r0, #255	@ 0xff
 800044c:	0a52      	lsrs	r2, r2, #9
 800044e:	e769      	b.n	8000324 <__aeabi_fdiv+0x104>
 8000450:	4644      	mov	r4, r8
 8000452:	e7ad      	b.n	80003b0 <__aeabi_fdiv+0x190>
 8000454:	0800503c 	.word	0x0800503c
 8000458:	0800507c 	.word	0x0800507c
 800045c:	f7ffffff 	.word	0xf7ffffff

08000460 <__aeabi_fmul>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	464f      	mov	r7, r9
 8000464:	4646      	mov	r6, r8
 8000466:	46d6      	mov	lr, sl
 8000468:	0243      	lsls	r3, r0, #9
 800046a:	0a5b      	lsrs	r3, r3, #9
 800046c:	0045      	lsls	r5, r0, #1
 800046e:	b5c0      	push	{r6, r7, lr}
 8000470:	4699      	mov	r9, r3
 8000472:	1c0f      	adds	r7, r1, #0
 8000474:	0e2d      	lsrs	r5, r5, #24
 8000476:	0fc6      	lsrs	r6, r0, #31
 8000478:	2d00      	cmp	r5, #0
 800047a:	d100      	bne.n	800047e <__aeabi_fmul+0x1e>
 800047c:	e088      	b.n	8000590 <__aeabi_fmul+0x130>
 800047e:	2dff      	cmp	r5, #255	@ 0xff
 8000480:	d100      	bne.n	8000484 <__aeabi_fmul+0x24>
 8000482:	e08d      	b.n	80005a0 <__aeabi_fmul+0x140>
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	00db      	lsls	r3, r3, #3
 8000488:	04d2      	lsls	r2, r2, #19
 800048a:	431a      	orrs	r2, r3
 800048c:	2300      	movs	r3, #0
 800048e:	4691      	mov	r9, r2
 8000490:	4698      	mov	r8, r3
 8000492:	469a      	mov	sl, r3
 8000494:	3d7f      	subs	r5, #127	@ 0x7f
 8000496:	027c      	lsls	r4, r7, #9
 8000498:	007b      	lsls	r3, r7, #1
 800049a:	0a64      	lsrs	r4, r4, #9
 800049c:	0e1b      	lsrs	r3, r3, #24
 800049e:	0fff      	lsrs	r7, r7, #31
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d068      	beq.n	8000576 <__aeabi_fmul+0x116>
 80004a4:	2bff      	cmp	r3, #255	@ 0xff
 80004a6:	d021      	beq.n	80004ec <__aeabi_fmul+0x8c>
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	00e4      	lsls	r4, r4, #3
 80004ac:	04d2      	lsls	r2, r2, #19
 80004ae:	4314      	orrs	r4, r2
 80004b0:	4642      	mov	r2, r8
 80004b2:	3b7f      	subs	r3, #127	@ 0x7f
 80004b4:	195b      	adds	r3, r3, r5
 80004b6:	2100      	movs	r1, #0
 80004b8:	1c5d      	adds	r5, r3, #1
 80004ba:	2a0a      	cmp	r2, #10
 80004bc:	dc2e      	bgt.n	800051c <__aeabi_fmul+0xbc>
 80004be:	407e      	eors	r6, r7
 80004c0:	4642      	mov	r2, r8
 80004c2:	2a02      	cmp	r2, #2
 80004c4:	dc23      	bgt.n	800050e <__aeabi_fmul+0xae>
 80004c6:	3a01      	subs	r2, #1
 80004c8:	2a01      	cmp	r2, #1
 80004ca:	d900      	bls.n	80004ce <__aeabi_fmul+0x6e>
 80004cc:	e0bd      	b.n	800064a <__aeabi_fmul+0x1ea>
 80004ce:	2902      	cmp	r1, #2
 80004d0:	d06e      	beq.n	80005b0 <__aeabi_fmul+0x150>
 80004d2:	2901      	cmp	r1, #1
 80004d4:	d12c      	bne.n	8000530 <__aeabi_fmul+0xd0>
 80004d6:	2000      	movs	r0, #0
 80004d8:	2200      	movs	r2, #0
 80004da:	05c0      	lsls	r0, r0, #23
 80004dc:	07f6      	lsls	r6, r6, #31
 80004de:	4310      	orrs	r0, r2
 80004e0:	4330      	orrs	r0, r6
 80004e2:	bce0      	pop	{r5, r6, r7}
 80004e4:	46ba      	mov	sl, r7
 80004e6:	46b1      	mov	r9, r6
 80004e8:	46a8      	mov	r8, r5
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ec:	002b      	movs	r3, r5
 80004ee:	33ff      	adds	r3, #255	@ 0xff
 80004f0:	2c00      	cmp	r4, #0
 80004f2:	d065      	beq.n	80005c0 <__aeabi_fmul+0x160>
 80004f4:	2203      	movs	r2, #3
 80004f6:	4641      	mov	r1, r8
 80004f8:	4311      	orrs	r1, r2
 80004fa:	0032      	movs	r2, r6
 80004fc:	3501      	adds	r5, #1
 80004fe:	4688      	mov	r8, r1
 8000500:	407a      	eors	r2, r7
 8000502:	35ff      	adds	r5, #255	@ 0xff
 8000504:	290a      	cmp	r1, #10
 8000506:	dd00      	ble.n	800050a <__aeabi_fmul+0xaa>
 8000508:	e0d8      	b.n	80006bc <__aeabi_fmul+0x25c>
 800050a:	0016      	movs	r6, r2
 800050c:	2103      	movs	r1, #3
 800050e:	4640      	mov	r0, r8
 8000510:	2201      	movs	r2, #1
 8000512:	4082      	lsls	r2, r0
 8000514:	20a6      	movs	r0, #166	@ 0xa6
 8000516:	00c0      	lsls	r0, r0, #3
 8000518:	4202      	tst	r2, r0
 800051a:	d020      	beq.n	800055e <__aeabi_fmul+0xfe>
 800051c:	4653      	mov	r3, sl
 800051e:	2b02      	cmp	r3, #2
 8000520:	d046      	beq.n	80005b0 <__aeabi_fmul+0x150>
 8000522:	2b03      	cmp	r3, #3
 8000524:	d100      	bne.n	8000528 <__aeabi_fmul+0xc8>
 8000526:	e0bb      	b.n	80006a0 <__aeabi_fmul+0x240>
 8000528:	4651      	mov	r1, sl
 800052a:	464c      	mov	r4, r9
 800052c:	2901      	cmp	r1, #1
 800052e:	d0d2      	beq.n	80004d6 <__aeabi_fmul+0x76>
 8000530:	002b      	movs	r3, r5
 8000532:	337f      	adds	r3, #127	@ 0x7f
 8000534:	2b00      	cmp	r3, #0
 8000536:	dd70      	ble.n	800061a <__aeabi_fmul+0x1ba>
 8000538:	0762      	lsls	r2, r4, #29
 800053a:	d004      	beq.n	8000546 <__aeabi_fmul+0xe6>
 800053c:	220f      	movs	r2, #15
 800053e:	4022      	ands	r2, r4
 8000540:	2a04      	cmp	r2, #4
 8000542:	d000      	beq.n	8000546 <__aeabi_fmul+0xe6>
 8000544:	3404      	adds	r4, #4
 8000546:	0122      	lsls	r2, r4, #4
 8000548:	d503      	bpl.n	8000552 <__aeabi_fmul+0xf2>
 800054a:	4b63      	ldr	r3, [pc, #396]	@ (80006d8 <__aeabi_fmul+0x278>)
 800054c:	401c      	ands	r4, r3
 800054e:	002b      	movs	r3, r5
 8000550:	3380      	adds	r3, #128	@ 0x80
 8000552:	2bfe      	cmp	r3, #254	@ 0xfe
 8000554:	dc2c      	bgt.n	80005b0 <__aeabi_fmul+0x150>
 8000556:	01a2      	lsls	r2, r4, #6
 8000558:	0a52      	lsrs	r2, r2, #9
 800055a:	b2d8      	uxtb	r0, r3
 800055c:	e7bd      	b.n	80004da <__aeabi_fmul+0x7a>
 800055e:	2090      	movs	r0, #144	@ 0x90
 8000560:	0080      	lsls	r0, r0, #2
 8000562:	4202      	tst	r2, r0
 8000564:	d127      	bne.n	80005b6 <__aeabi_fmul+0x156>
 8000566:	38b9      	subs	r0, #185	@ 0xb9
 8000568:	38ff      	subs	r0, #255	@ 0xff
 800056a:	4210      	tst	r0, r2
 800056c:	d06d      	beq.n	800064a <__aeabi_fmul+0x1ea>
 800056e:	003e      	movs	r6, r7
 8000570:	46a1      	mov	r9, r4
 8000572:	468a      	mov	sl, r1
 8000574:	e7d2      	b.n	800051c <__aeabi_fmul+0xbc>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d141      	bne.n	80005fe <__aeabi_fmul+0x19e>
 800057a:	2301      	movs	r3, #1
 800057c:	4642      	mov	r2, r8
 800057e:	431a      	orrs	r2, r3
 8000580:	4690      	mov	r8, r2
 8000582:	002b      	movs	r3, r5
 8000584:	4642      	mov	r2, r8
 8000586:	2101      	movs	r1, #1
 8000588:	1c5d      	adds	r5, r3, #1
 800058a:	2a0a      	cmp	r2, #10
 800058c:	dd97      	ble.n	80004be <__aeabi_fmul+0x5e>
 800058e:	e7c5      	b.n	800051c <__aeabi_fmul+0xbc>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d126      	bne.n	80005e2 <__aeabi_fmul+0x182>
 8000594:	2304      	movs	r3, #4
 8000596:	4698      	mov	r8, r3
 8000598:	3b03      	subs	r3, #3
 800059a:	2500      	movs	r5, #0
 800059c:	469a      	mov	sl, r3
 800059e:	e77a      	b.n	8000496 <__aeabi_fmul+0x36>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d118      	bne.n	80005d6 <__aeabi_fmul+0x176>
 80005a4:	2308      	movs	r3, #8
 80005a6:	4698      	mov	r8, r3
 80005a8:	3b06      	subs	r3, #6
 80005aa:	25ff      	movs	r5, #255	@ 0xff
 80005ac:	469a      	mov	sl, r3
 80005ae:	e772      	b.n	8000496 <__aeabi_fmul+0x36>
 80005b0:	20ff      	movs	r0, #255	@ 0xff
 80005b2:	2200      	movs	r2, #0
 80005b4:	e791      	b.n	80004da <__aeabi_fmul+0x7a>
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	2600      	movs	r6, #0
 80005ba:	20ff      	movs	r0, #255	@ 0xff
 80005bc:	03d2      	lsls	r2, r2, #15
 80005be:	e78c      	b.n	80004da <__aeabi_fmul+0x7a>
 80005c0:	4641      	mov	r1, r8
 80005c2:	2202      	movs	r2, #2
 80005c4:	3501      	adds	r5, #1
 80005c6:	4311      	orrs	r1, r2
 80005c8:	4688      	mov	r8, r1
 80005ca:	35ff      	adds	r5, #255	@ 0xff
 80005cc:	290a      	cmp	r1, #10
 80005ce:	dca5      	bgt.n	800051c <__aeabi_fmul+0xbc>
 80005d0:	2102      	movs	r1, #2
 80005d2:	407e      	eors	r6, r7
 80005d4:	e774      	b.n	80004c0 <__aeabi_fmul+0x60>
 80005d6:	230c      	movs	r3, #12
 80005d8:	4698      	mov	r8, r3
 80005da:	3b09      	subs	r3, #9
 80005dc:	25ff      	movs	r5, #255	@ 0xff
 80005de:	469a      	mov	sl, r3
 80005e0:	e759      	b.n	8000496 <__aeabi_fmul+0x36>
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fd2e 	bl	8001044 <__clzsi2>
 80005e8:	464a      	mov	r2, r9
 80005ea:	1f43      	subs	r3, r0, #5
 80005ec:	2576      	movs	r5, #118	@ 0x76
 80005ee:	409a      	lsls	r2, r3
 80005f0:	2300      	movs	r3, #0
 80005f2:	426d      	negs	r5, r5
 80005f4:	4691      	mov	r9, r2
 80005f6:	4698      	mov	r8, r3
 80005f8:	469a      	mov	sl, r3
 80005fa:	1a2d      	subs	r5, r5, r0
 80005fc:	e74b      	b.n	8000496 <__aeabi_fmul+0x36>
 80005fe:	0020      	movs	r0, r4
 8000600:	f000 fd20 	bl	8001044 <__clzsi2>
 8000604:	4642      	mov	r2, r8
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409c      	lsls	r4, r3
 800060a:	1a2b      	subs	r3, r5, r0
 800060c:	3b76      	subs	r3, #118	@ 0x76
 800060e:	2100      	movs	r1, #0
 8000610:	1c5d      	adds	r5, r3, #1
 8000612:	2a0a      	cmp	r2, #10
 8000614:	dc00      	bgt.n	8000618 <__aeabi_fmul+0x1b8>
 8000616:	e752      	b.n	80004be <__aeabi_fmul+0x5e>
 8000618:	e780      	b.n	800051c <__aeabi_fmul+0xbc>
 800061a:	2201      	movs	r2, #1
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	2b1b      	cmp	r3, #27
 8000620:	dd00      	ble.n	8000624 <__aeabi_fmul+0x1c4>
 8000622:	e758      	b.n	80004d6 <__aeabi_fmul+0x76>
 8000624:	359e      	adds	r5, #158	@ 0x9e
 8000626:	0022      	movs	r2, r4
 8000628:	40ac      	lsls	r4, r5
 800062a:	40da      	lsrs	r2, r3
 800062c:	1e63      	subs	r3, r4, #1
 800062e:	419c      	sbcs	r4, r3
 8000630:	4322      	orrs	r2, r4
 8000632:	0753      	lsls	r3, r2, #29
 8000634:	d004      	beq.n	8000640 <__aeabi_fmul+0x1e0>
 8000636:	230f      	movs	r3, #15
 8000638:	4013      	ands	r3, r2
 800063a:	2b04      	cmp	r3, #4
 800063c:	d000      	beq.n	8000640 <__aeabi_fmul+0x1e0>
 800063e:	3204      	adds	r2, #4
 8000640:	0153      	lsls	r3, r2, #5
 8000642:	d537      	bpl.n	80006b4 <__aeabi_fmul+0x254>
 8000644:	2001      	movs	r0, #1
 8000646:	2200      	movs	r2, #0
 8000648:	e747      	b.n	80004da <__aeabi_fmul+0x7a>
 800064a:	0c21      	lsrs	r1, r4, #16
 800064c:	464a      	mov	r2, r9
 800064e:	0424      	lsls	r4, r4, #16
 8000650:	0c24      	lsrs	r4, r4, #16
 8000652:	0027      	movs	r7, r4
 8000654:	0c10      	lsrs	r0, r2, #16
 8000656:	0412      	lsls	r2, r2, #16
 8000658:	0c12      	lsrs	r2, r2, #16
 800065a:	4344      	muls	r4, r0
 800065c:	4357      	muls	r7, r2
 800065e:	4348      	muls	r0, r1
 8000660:	4351      	muls	r1, r2
 8000662:	0c3a      	lsrs	r2, r7, #16
 8000664:	1909      	adds	r1, r1, r4
 8000666:	1852      	adds	r2, r2, r1
 8000668:	4294      	cmp	r4, r2
 800066a:	d903      	bls.n	8000674 <__aeabi_fmul+0x214>
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	0249      	lsls	r1, r1, #9
 8000670:	468c      	mov	ip, r1
 8000672:	4460      	add	r0, ip
 8000674:	043f      	lsls	r7, r7, #16
 8000676:	0411      	lsls	r1, r2, #16
 8000678:	0c3f      	lsrs	r7, r7, #16
 800067a:	19c9      	adds	r1, r1, r7
 800067c:	018c      	lsls	r4, r1, #6
 800067e:	1e67      	subs	r7, r4, #1
 8000680:	41bc      	sbcs	r4, r7
 8000682:	0c12      	lsrs	r2, r2, #16
 8000684:	0e89      	lsrs	r1, r1, #26
 8000686:	1812      	adds	r2, r2, r0
 8000688:	430c      	orrs	r4, r1
 800068a:	0192      	lsls	r2, r2, #6
 800068c:	4314      	orrs	r4, r2
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	d50e      	bpl.n	80006b0 <__aeabi_fmul+0x250>
 8000692:	2301      	movs	r3, #1
 8000694:	0862      	lsrs	r2, r4, #1
 8000696:	401c      	ands	r4, r3
 8000698:	4314      	orrs	r4, r2
 800069a:	e749      	b.n	8000530 <__aeabi_fmul+0xd0>
 800069c:	003e      	movs	r6, r7
 800069e:	46a1      	mov	r9, r4
 80006a0:	2280      	movs	r2, #128	@ 0x80
 80006a2:	464b      	mov	r3, r9
 80006a4:	03d2      	lsls	r2, r2, #15
 80006a6:	431a      	orrs	r2, r3
 80006a8:	0252      	lsls	r2, r2, #9
 80006aa:	20ff      	movs	r0, #255	@ 0xff
 80006ac:	0a52      	lsrs	r2, r2, #9
 80006ae:	e714      	b.n	80004da <__aeabi_fmul+0x7a>
 80006b0:	001d      	movs	r5, r3
 80006b2:	e73d      	b.n	8000530 <__aeabi_fmul+0xd0>
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	2000      	movs	r0, #0
 80006b8:	0a52      	lsrs	r2, r2, #9
 80006ba:	e70e      	b.n	80004da <__aeabi_fmul+0x7a>
 80006bc:	290f      	cmp	r1, #15
 80006be:	d1ed      	bne.n	800069c <__aeabi_fmul+0x23c>
 80006c0:	2280      	movs	r2, #128	@ 0x80
 80006c2:	464b      	mov	r3, r9
 80006c4:	03d2      	lsls	r2, r2, #15
 80006c6:	4213      	tst	r3, r2
 80006c8:	d0ea      	beq.n	80006a0 <__aeabi_fmul+0x240>
 80006ca:	4214      	tst	r4, r2
 80006cc:	d1e8      	bne.n	80006a0 <__aeabi_fmul+0x240>
 80006ce:	003e      	movs	r6, r7
 80006d0:	20ff      	movs	r0, #255	@ 0xff
 80006d2:	4322      	orrs	r2, r4
 80006d4:	e701      	b.n	80004da <__aeabi_fmul+0x7a>
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	f7ffffff 	.word	0xf7ffffff

080006dc <__aeabi_i2f>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	2800      	cmp	r0, #0
 80006e0:	d013      	beq.n	800070a <__aeabi_i2f+0x2e>
 80006e2:	17c3      	asrs	r3, r0, #31
 80006e4:	18c5      	adds	r5, r0, r3
 80006e6:	405d      	eors	r5, r3
 80006e8:	0fc4      	lsrs	r4, r0, #31
 80006ea:	0028      	movs	r0, r5
 80006ec:	f000 fcaa 	bl	8001044 <__clzsi2>
 80006f0:	239e      	movs	r3, #158	@ 0x9e
 80006f2:	0001      	movs	r1, r0
 80006f4:	1a1b      	subs	r3, r3, r0
 80006f6:	2b96      	cmp	r3, #150	@ 0x96
 80006f8:	dc0f      	bgt.n	800071a <__aeabi_i2f+0x3e>
 80006fa:	2808      	cmp	r0, #8
 80006fc:	d034      	beq.n	8000768 <__aeabi_i2f+0x8c>
 80006fe:	3908      	subs	r1, #8
 8000700:	408d      	lsls	r5, r1
 8000702:	026d      	lsls	r5, r5, #9
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	b2d8      	uxtb	r0, r3
 8000708:	e002      	b.n	8000710 <__aeabi_i2f+0x34>
 800070a:	2400      	movs	r4, #0
 800070c:	2000      	movs	r0, #0
 800070e:	2500      	movs	r5, #0
 8000710:	05c0      	lsls	r0, r0, #23
 8000712:	4328      	orrs	r0, r5
 8000714:	07e4      	lsls	r4, r4, #31
 8000716:	4320      	orrs	r0, r4
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	2b99      	cmp	r3, #153	@ 0x99
 800071c:	dc16      	bgt.n	800074c <__aeabi_i2f+0x70>
 800071e:	1f42      	subs	r2, r0, #5
 8000720:	2805      	cmp	r0, #5
 8000722:	d000      	beq.n	8000726 <__aeabi_i2f+0x4a>
 8000724:	4095      	lsls	r5, r2
 8000726:	002a      	movs	r2, r5
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <__aeabi_i2f+0x94>)
 800072a:	4002      	ands	r2, r0
 800072c:	076e      	lsls	r6, r5, #29
 800072e:	d009      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000730:	260f      	movs	r6, #15
 8000732:	4035      	ands	r5, r6
 8000734:	2d04      	cmp	r5, #4
 8000736:	d005      	beq.n	8000744 <__aeabi_i2f+0x68>
 8000738:	3204      	adds	r2, #4
 800073a:	0155      	lsls	r5, r2, #5
 800073c:	d502      	bpl.n	8000744 <__aeabi_i2f+0x68>
 800073e:	239f      	movs	r3, #159	@ 0x9f
 8000740:	4002      	ands	r2, r0
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	0192      	lsls	r2, r2, #6
 8000746:	0a55      	lsrs	r5, r2, #9
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	e7e1      	b.n	8000710 <__aeabi_i2f+0x34>
 800074c:	2205      	movs	r2, #5
 800074e:	1a12      	subs	r2, r2, r0
 8000750:	0028      	movs	r0, r5
 8000752:	40d0      	lsrs	r0, r2
 8000754:	0002      	movs	r2, r0
 8000756:	0008      	movs	r0, r1
 8000758:	301b      	adds	r0, #27
 800075a:	4085      	lsls	r5, r0
 800075c:	0028      	movs	r0, r5
 800075e:	1e45      	subs	r5, r0, #1
 8000760:	41a8      	sbcs	r0, r5
 8000762:	4302      	orrs	r2, r0
 8000764:	0015      	movs	r5, r2
 8000766:	e7de      	b.n	8000726 <__aeabi_i2f+0x4a>
 8000768:	026d      	lsls	r5, r5, #9
 800076a:	2096      	movs	r0, #150	@ 0x96
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	e7cf      	b.n	8000710 <__aeabi_i2f+0x34>
 8000770:	fbffffff 	.word	0xfbffffff

08000774 <__aeabi_dsub>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	464e      	mov	r6, r9
 8000778:	4645      	mov	r5, r8
 800077a:	46de      	mov	lr, fp
 800077c:	4657      	mov	r7, sl
 800077e:	b5e0      	push	{r5, r6, r7, lr}
 8000780:	b085      	sub	sp, #20
 8000782:	9000      	str	r0, [sp, #0]
 8000784:	9101      	str	r1, [sp, #4]
 8000786:	030c      	lsls	r4, r1, #12
 8000788:	004f      	lsls	r7, r1, #1
 800078a:	0fce      	lsrs	r6, r1, #31
 800078c:	0a61      	lsrs	r1, r4, #9
 800078e:	9c00      	ldr	r4, [sp, #0]
 8000790:	46b0      	mov	r8, r6
 8000792:	0f64      	lsrs	r4, r4, #29
 8000794:	430c      	orrs	r4, r1
 8000796:	9900      	ldr	r1, [sp, #0]
 8000798:	0d7f      	lsrs	r7, r7, #21
 800079a:	00c8      	lsls	r0, r1, #3
 800079c:	0011      	movs	r1, r2
 800079e:	001a      	movs	r2, r3
 80007a0:	031b      	lsls	r3, r3, #12
 80007a2:	469c      	mov	ip, r3
 80007a4:	9100      	str	r1, [sp, #0]
 80007a6:	9201      	str	r2, [sp, #4]
 80007a8:	0051      	lsls	r1, r2, #1
 80007aa:	0d4b      	lsrs	r3, r1, #21
 80007ac:	4699      	mov	r9, r3
 80007ae:	9b01      	ldr	r3, [sp, #4]
 80007b0:	9d00      	ldr	r5, [sp, #0]
 80007b2:	0fd9      	lsrs	r1, r3, #31
 80007b4:	4663      	mov	r3, ip
 80007b6:	0f6a      	lsrs	r2, r5, #29
 80007b8:	0a5b      	lsrs	r3, r3, #9
 80007ba:	4313      	orrs	r3, r2
 80007bc:	00ea      	lsls	r2, r5, #3
 80007be:	4694      	mov	ip, r2
 80007c0:	4693      	mov	fp, r2
 80007c2:	4ac1      	ldr	r2, [pc, #772]	@ (8000ac8 <__aeabi_dsub+0x354>)
 80007c4:	9003      	str	r0, [sp, #12]
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	4591      	cmp	r9, r2
 80007ca:	d100      	bne.n	80007ce <__aeabi_dsub+0x5a>
 80007cc:	e0cd      	b.n	800096a <__aeabi_dsub+0x1f6>
 80007ce:	2501      	movs	r5, #1
 80007d0:	4069      	eors	r1, r5
 80007d2:	464d      	mov	r5, r9
 80007d4:	1b7d      	subs	r5, r7, r5
 80007d6:	46aa      	mov	sl, r5
 80007d8:	428e      	cmp	r6, r1
 80007da:	d100      	bne.n	80007de <__aeabi_dsub+0x6a>
 80007dc:	e080      	b.n	80008e0 <__aeabi_dsub+0x16c>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dsub+0x70>
 80007e2:	e335      	b.n	8000e50 <__aeabi_dsub+0x6dc>
 80007e4:	4649      	mov	r1, r9
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_dsub+0x78>
 80007ea:	e0df      	b.n	80009ac <__aeabi_dsub+0x238>
 80007ec:	4297      	cmp	r7, r2
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dsub+0x7e>
 80007f0:	e194      	b.n	8000b1c <__aeabi_dsub+0x3a8>
 80007f2:	4652      	mov	r2, sl
 80007f4:	2501      	movs	r5, #1
 80007f6:	2a38      	cmp	r2, #56	@ 0x38
 80007f8:	dc19      	bgt.n	800082e <__aeabi_dsub+0xba>
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	9b02      	ldr	r3, [sp, #8]
 80007fe:	0412      	lsls	r2, r2, #16
 8000800:	4313      	orrs	r3, r2
 8000802:	9302      	str	r3, [sp, #8]
 8000804:	4652      	mov	r2, sl
 8000806:	2a1f      	cmp	r2, #31
 8000808:	dd00      	ble.n	800080c <__aeabi_dsub+0x98>
 800080a:	e1e3      	b.n	8000bd4 <__aeabi_dsub+0x460>
 800080c:	4653      	mov	r3, sl
 800080e:	2220      	movs	r2, #32
 8000810:	4661      	mov	r1, ip
 8000812:	9d02      	ldr	r5, [sp, #8]
 8000814:	1ad2      	subs	r2, r2, r3
 8000816:	4095      	lsls	r5, r2
 8000818:	40d9      	lsrs	r1, r3
 800081a:	430d      	orrs	r5, r1
 800081c:	4661      	mov	r1, ip
 800081e:	4091      	lsls	r1, r2
 8000820:	000a      	movs	r2, r1
 8000822:	1e51      	subs	r1, r2, #1
 8000824:	418a      	sbcs	r2, r1
 8000826:	4315      	orrs	r5, r2
 8000828:	9a02      	ldr	r2, [sp, #8]
 800082a:	40da      	lsrs	r2, r3
 800082c:	1aa4      	subs	r4, r4, r2
 800082e:	1b45      	subs	r5, r0, r5
 8000830:	42a8      	cmp	r0, r5
 8000832:	4180      	sbcs	r0, r0
 8000834:	4240      	negs	r0, r0
 8000836:	1a24      	subs	r4, r4, r0
 8000838:	0223      	lsls	r3, r4, #8
 800083a:	d400      	bmi.n	800083e <__aeabi_dsub+0xca>
 800083c:	e13d      	b.n	8000aba <__aeabi_dsub+0x346>
 800083e:	0264      	lsls	r4, r4, #9
 8000840:	0a64      	lsrs	r4, r4, #9
 8000842:	2c00      	cmp	r4, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dsub+0xd4>
 8000846:	e147      	b.n	8000ad8 <__aeabi_dsub+0x364>
 8000848:	0020      	movs	r0, r4
 800084a:	f000 fbfb 	bl	8001044 <__clzsi2>
 800084e:	0003      	movs	r3, r0
 8000850:	3b08      	subs	r3, #8
 8000852:	2120      	movs	r1, #32
 8000854:	0028      	movs	r0, r5
 8000856:	1aca      	subs	r2, r1, r3
 8000858:	40d0      	lsrs	r0, r2
 800085a:	409c      	lsls	r4, r3
 800085c:	0002      	movs	r2, r0
 800085e:	409d      	lsls	r5, r3
 8000860:	4322      	orrs	r2, r4
 8000862:	429f      	cmp	r7, r3
 8000864:	dd00      	ble.n	8000868 <__aeabi_dsub+0xf4>
 8000866:	e177      	b.n	8000b58 <__aeabi_dsub+0x3e4>
 8000868:	1bd8      	subs	r0, r3, r7
 800086a:	3001      	adds	r0, #1
 800086c:	1a09      	subs	r1, r1, r0
 800086e:	002c      	movs	r4, r5
 8000870:	408d      	lsls	r5, r1
 8000872:	40c4      	lsrs	r4, r0
 8000874:	1e6b      	subs	r3, r5, #1
 8000876:	419d      	sbcs	r5, r3
 8000878:	0013      	movs	r3, r2
 800087a:	40c2      	lsrs	r2, r0
 800087c:	408b      	lsls	r3, r1
 800087e:	4325      	orrs	r5, r4
 8000880:	2700      	movs	r7, #0
 8000882:	0014      	movs	r4, r2
 8000884:	431d      	orrs	r5, r3
 8000886:	076b      	lsls	r3, r5, #29
 8000888:	d009      	beq.n	800089e <__aeabi_dsub+0x12a>
 800088a:	230f      	movs	r3, #15
 800088c:	402b      	ands	r3, r5
 800088e:	2b04      	cmp	r3, #4
 8000890:	d005      	beq.n	800089e <__aeabi_dsub+0x12a>
 8000892:	1d2b      	adds	r3, r5, #4
 8000894:	42ab      	cmp	r3, r5
 8000896:	41ad      	sbcs	r5, r5
 8000898:	426d      	negs	r5, r5
 800089a:	1964      	adds	r4, r4, r5
 800089c:	001d      	movs	r5, r3
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_dsub+0x130>
 80008a2:	e140      	b.n	8000b26 <__aeabi_dsub+0x3b2>
 80008a4:	4a88      	ldr	r2, [pc, #544]	@ (8000ac8 <__aeabi_dsub+0x354>)
 80008a6:	3701      	adds	r7, #1
 80008a8:	4297      	cmp	r7, r2
 80008aa:	d100      	bne.n	80008ae <__aeabi_dsub+0x13a>
 80008ac:	e101      	b.n	8000ab2 <__aeabi_dsub+0x33e>
 80008ae:	2601      	movs	r6, #1
 80008b0:	4643      	mov	r3, r8
 80008b2:	4986      	ldr	r1, [pc, #536]	@ (8000acc <__aeabi_dsub+0x358>)
 80008b4:	08ed      	lsrs	r5, r5, #3
 80008b6:	4021      	ands	r1, r4
 80008b8:	074a      	lsls	r2, r1, #29
 80008ba:	432a      	orrs	r2, r5
 80008bc:	057c      	lsls	r4, r7, #21
 80008be:	024d      	lsls	r5, r1, #9
 80008c0:	0b2d      	lsrs	r5, r5, #12
 80008c2:	0d64      	lsrs	r4, r4, #21
 80008c4:	401e      	ands	r6, r3
 80008c6:	0524      	lsls	r4, r4, #20
 80008c8:	432c      	orrs	r4, r5
 80008ca:	07f6      	lsls	r6, r6, #31
 80008cc:	4334      	orrs	r4, r6
 80008ce:	0010      	movs	r0, r2
 80008d0:	0021      	movs	r1, r4
 80008d2:	b005      	add	sp, #20
 80008d4:	bcf0      	pop	{r4, r5, r6, r7}
 80008d6:	46bb      	mov	fp, r7
 80008d8:	46b2      	mov	sl, r6
 80008da:	46a9      	mov	r9, r5
 80008dc:	46a0      	mov	r8, r4
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_dsub+0x172>
 80008e4:	e2d0      	b.n	8000e88 <__aeabi_dsub+0x714>
 80008e6:	4649      	mov	r1, r9
 80008e8:	2900      	cmp	r1, #0
 80008ea:	d000      	beq.n	80008ee <__aeabi_dsub+0x17a>
 80008ec:	e0d4      	b.n	8000a98 <__aeabi_dsub+0x324>
 80008ee:	4661      	mov	r1, ip
 80008f0:	9b02      	ldr	r3, [sp, #8]
 80008f2:	4319      	orrs	r1, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dsub+0x184>
 80008f6:	e12b      	b.n	8000b50 <__aeabi_dsub+0x3dc>
 80008f8:	1e69      	subs	r1, r5, #1
 80008fa:	2d01      	cmp	r5, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dsub+0x18c>
 80008fe:	e1d9      	b.n	8000cb4 <__aeabi_dsub+0x540>
 8000900:	4295      	cmp	r5, r2
 8000902:	d100      	bne.n	8000906 <__aeabi_dsub+0x192>
 8000904:	e10a      	b.n	8000b1c <__aeabi_dsub+0x3a8>
 8000906:	2501      	movs	r5, #1
 8000908:	2938      	cmp	r1, #56	@ 0x38
 800090a:	dc17      	bgt.n	800093c <__aeabi_dsub+0x1c8>
 800090c:	468a      	mov	sl, r1
 800090e:	4653      	mov	r3, sl
 8000910:	2b1f      	cmp	r3, #31
 8000912:	dd00      	ble.n	8000916 <__aeabi_dsub+0x1a2>
 8000914:	e1e7      	b.n	8000ce6 <__aeabi_dsub+0x572>
 8000916:	2220      	movs	r2, #32
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	9b02      	ldr	r3, [sp, #8]
 800091c:	4661      	mov	r1, ip
 800091e:	4093      	lsls	r3, r2
 8000920:	001d      	movs	r5, r3
 8000922:	4653      	mov	r3, sl
 8000924:	40d9      	lsrs	r1, r3
 8000926:	4663      	mov	r3, ip
 8000928:	4093      	lsls	r3, r2
 800092a:	001a      	movs	r2, r3
 800092c:	430d      	orrs	r5, r1
 800092e:	1e51      	subs	r1, r2, #1
 8000930:	418a      	sbcs	r2, r1
 8000932:	4653      	mov	r3, sl
 8000934:	4315      	orrs	r5, r2
 8000936:	9a02      	ldr	r2, [sp, #8]
 8000938:	40da      	lsrs	r2, r3
 800093a:	18a4      	adds	r4, r4, r2
 800093c:	182d      	adds	r5, r5, r0
 800093e:	4285      	cmp	r5, r0
 8000940:	4180      	sbcs	r0, r0
 8000942:	4240      	negs	r0, r0
 8000944:	1824      	adds	r4, r4, r0
 8000946:	0223      	lsls	r3, r4, #8
 8000948:	d400      	bmi.n	800094c <__aeabi_dsub+0x1d8>
 800094a:	e0b6      	b.n	8000aba <__aeabi_dsub+0x346>
 800094c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac8 <__aeabi_dsub+0x354>)
 800094e:	3701      	adds	r7, #1
 8000950:	429f      	cmp	r7, r3
 8000952:	d100      	bne.n	8000956 <__aeabi_dsub+0x1e2>
 8000954:	e0ad      	b.n	8000ab2 <__aeabi_dsub+0x33e>
 8000956:	2101      	movs	r1, #1
 8000958:	4b5c      	ldr	r3, [pc, #368]	@ (8000acc <__aeabi_dsub+0x358>)
 800095a:	086a      	lsrs	r2, r5, #1
 800095c:	401c      	ands	r4, r3
 800095e:	4029      	ands	r1, r5
 8000960:	430a      	orrs	r2, r1
 8000962:	07e5      	lsls	r5, r4, #31
 8000964:	4315      	orrs	r5, r2
 8000966:	0864      	lsrs	r4, r4, #1
 8000968:	e78d      	b.n	8000886 <__aeabi_dsub+0x112>
 800096a:	4a59      	ldr	r2, [pc, #356]	@ (8000ad0 <__aeabi_dsub+0x35c>)
 800096c:	9b02      	ldr	r3, [sp, #8]
 800096e:	4692      	mov	sl, r2
 8000970:	4662      	mov	r2, ip
 8000972:	44ba      	add	sl, r7
 8000974:	431a      	orrs	r2, r3
 8000976:	d02c      	beq.n	80009d2 <__aeabi_dsub+0x25e>
 8000978:	428e      	cmp	r6, r1
 800097a:	d02e      	beq.n	80009da <__aeabi_dsub+0x266>
 800097c:	4652      	mov	r2, sl
 800097e:	2a00      	cmp	r2, #0
 8000980:	d060      	beq.n	8000a44 <__aeabi_dsub+0x2d0>
 8000982:	2f00      	cmp	r7, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_dsub+0x214>
 8000986:	e0db      	b.n	8000b40 <__aeabi_dsub+0x3cc>
 8000988:	4663      	mov	r3, ip
 800098a:	000e      	movs	r6, r1
 800098c:	9c02      	ldr	r4, [sp, #8]
 800098e:	08d8      	lsrs	r0, r3, #3
 8000990:	0762      	lsls	r2, r4, #29
 8000992:	4302      	orrs	r2, r0
 8000994:	08e4      	lsrs	r4, r4, #3
 8000996:	0013      	movs	r3, r2
 8000998:	4323      	orrs	r3, r4
 800099a:	d100      	bne.n	800099e <__aeabi_dsub+0x22a>
 800099c:	e254      	b.n	8000e48 <__aeabi_dsub+0x6d4>
 800099e:	2580      	movs	r5, #128	@ 0x80
 80009a0:	032d      	lsls	r5, r5, #12
 80009a2:	4325      	orrs	r5, r4
 80009a4:	032d      	lsls	r5, r5, #12
 80009a6:	4c48      	ldr	r4, [pc, #288]	@ (8000ac8 <__aeabi_dsub+0x354>)
 80009a8:	0b2d      	lsrs	r5, r5, #12
 80009aa:	e78c      	b.n	80008c6 <__aeabi_dsub+0x152>
 80009ac:	4661      	mov	r1, ip
 80009ae:	9b02      	ldr	r3, [sp, #8]
 80009b0:	4319      	orrs	r1, r3
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dsub+0x242>
 80009b4:	e0cc      	b.n	8000b50 <__aeabi_dsub+0x3dc>
 80009b6:	0029      	movs	r1, r5
 80009b8:	3901      	subs	r1, #1
 80009ba:	2d01      	cmp	r5, #1
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x24c>
 80009be:	e188      	b.n	8000cd2 <__aeabi_dsub+0x55e>
 80009c0:	4295      	cmp	r5, r2
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dsub+0x252>
 80009c4:	e0aa      	b.n	8000b1c <__aeabi_dsub+0x3a8>
 80009c6:	2501      	movs	r5, #1
 80009c8:	2938      	cmp	r1, #56	@ 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dsub+0x25a>
 80009cc:	e72f      	b.n	800082e <__aeabi_dsub+0xba>
 80009ce:	468a      	mov	sl, r1
 80009d0:	e718      	b.n	8000804 <__aeabi_dsub+0x90>
 80009d2:	2201      	movs	r2, #1
 80009d4:	4051      	eors	r1, r2
 80009d6:	428e      	cmp	r6, r1
 80009d8:	d1d0      	bne.n	800097c <__aeabi_dsub+0x208>
 80009da:	4653      	mov	r3, sl
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dsub+0x26e>
 80009e0:	e0be      	b.n	8000b60 <__aeabi_dsub+0x3ec>
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dsub+0x274>
 80009e6:	e138      	b.n	8000c5a <__aeabi_dsub+0x4e6>
 80009e8:	46ca      	mov	sl, r9
 80009ea:	0022      	movs	r2, r4
 80009ec:	4302      	orrs	r2, r0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dsub+0x27e>
 80009f0:	e1e2      	b.n	8000db8 <__aeabi_dsub+0x644>
 80009f2:	4653      	mov	r3, sl
 80009f4:	1e59      	subs	r1, r3, #1
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d100      	bne.n	80009fc <__aeabi_dsub+0x288>
 80009fa:	e20d      	b.n	8000e18 <__aeabi_dsub+0x6a4>
 80009fc:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <__aeabi_dsub+0x354>)
 80009fe:	4592      	cmp	sl, r2
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dsub+0x290>
 8000a02:	e1d2      	b.n	8000daa <__aeabi_dsub+0x636>
 8000a04:	2701      	movs	r7, #1
 8000a06:	2938      	cmp	r1, #56	@ 0x38
 8000a08:	dc13      	bgt.n	8000a32 <__aeabi_dsub+0x2be>
 8000a0a:	291f      	cmp	r1, #31
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dsub+0x29c>
 8000a0e:	e1ee      	b.n	8000dee <__aeabi_dsub+0x67a>
 8000a10:	2220      	movs	r2, #32
 8000a12:	9b02      	ldr	r3, [sp, #8]
 8000a14:	1a52      	subs	r2, r2, r1
 8000a16:	0025      	movs	r5, r4
 8000a18:	0007      	movs	r7, r0
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	4090      	lsls	r0, r2
 8000a20:	4095      	lsls	r5, r2
 8000a22:	40cf      	lsrs	r7, r1
 8000a24:	44a2      	add	sl, r4
 8000a26:	1e42      	subs	r2, r0, #1
 8000a28:	4190      	sbcs	r0, r2
 8000a2a:	4653      	mov	r3, sl
 8000a2c:	432f      	orrs	r7, r5
 8000a2e:	4307      	orrs	r7, r0
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	003d      	movs	r5, r7
 8000a34:	4465      	add	r5, ip
 8000a36:	4565      	cmp	r5, ip
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	9b02      	ldr	r3, [sp, #8]
 8000a3c:	4252      	negs	r2, r2
 8000a3e:	464f      	mov	r7, r9
 8000a40:	18d4      	adds	r4, r2, r3
 8000a42:	e780      	b.n	8000946 <__aeabi_dsub+0x1d2>
 8000a44:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <__aeabi_dsub+0x360>)
 8000a46:	1c7d      	adds	r5, r7, #1
 8000a48:	4215      	tst	r5, r2
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dsub+0x2da>
 8000a4c:	e0aa      	b.n	8000ba4 <__aeabi_dsub+0x430>
 8000a4e:	4662      	mov	r2, ip
 8000a50:	0025      	movs	r5, r4
 8000a52:	9b02      	ldr	r3, [sp, #8]
 8000a54:	4305      	orrs	r5, r0
 8000a56:	431a      	orrs	r2, r3
 8000a58:	2f00      	cmp	r7, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dsub+0x2ea>
 8000a5c:	e0f5      	b.n	8000c4a <__aeabi_dsub+0x4d6>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dsub+0x2f0>
 8000a62:	e16b      	b.n	8000d3c <__aeabi_dsub+0x5c8>
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dsub+0x2f6>
 8000a68:	e152      	b.n	8000d10 <__aeabi_dsub+0x59c>
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	1ac5      	subs	r5, r0, r3
 8000a6e:	9b02      	ldr	r3, [sp, #8]
 8000a70:	1ae2      	subs	r2, r4, r3
 8000a72:	42a8      	cmp	r0, r5
 8000a74:	419b      	sbcs	r3, r3
 8000a76:	425b      	negs	r3, r3
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	021a      	lsls	r2, r3, #8
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_dsub+0x30c>
 8000a7e:	e1d5      	b.n	8000e2c <__aeabi_dsub+0x6b8>
 8000a80:	4663      	mov	r3, ip
 8000a82:	1a1d      	subs	r5, r3, r0
 8000a84:	45ac      	cmp	ip, r5
 8000a86:	4192      	sbcs	r2, r2
 8000a88:	2601      	movs	r6, #1
 8000a8a:	9b02      	ldr	r3, [sp, #8]
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	1b1c      	subs	r4, r3, r4
 8000a90:	4688      	mov	r8, r1
 8000a92:	1aa4      	subs	r4, r4, r2
 8000a94:	400e      	ands	r6, r1
 8000a96:	e6f6      	b.n	8000886 <__aeabi_dsub+0x112>
 8000a98:	4297      	cmp	r7, r2
 8000a9a:	d03f      	beq.n	8000b1c <__aeabi_dsub+0x3a8>
 8000a9c:	4652      	mov	r2, sl
 8000a9e:	2501      	movs	r5, #1
 8000aa0:	2a38      	cmp	r2, #56	@ 0x38
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_dsub+0x332>
 8000aa4:	e74a      	b.n	800093c <__aeabi_dsub+0x1c8>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	9b02      	ldr	r3, [sp, #8]
 8000aaa:	0412      	lsls	r2, r2, #16
 8000aac:	4313      	orrs	r3, r2
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	e72d      	b.n	800090e <__aeabi_dsub+0x19a>
 8000ab2:	003c      	movs	r4, r7
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	e705      	b.n	80008c6 <__aeabi_dsub+0x152>
 8000aba:	2307      	movs	r3, #7
 8000abc:	402b      	ands	r3, r5
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_dsub+0x350>
 8000ac2:	e6e2      	b.n	800088a <__aeabi_dsub+0x116>
 8000ac4:	e06b      	b.n	8000b9e <__aeabi_dsub+0x42a>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	fffff801 	.word	0xfffff801
 8000ad4:	000007fe 	.word	0x000007fe
 8000ad8:	0028      	movs	r0, r5
 8000ada:	f000 fab3 	bl	8001044 <__clzsi2>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	2b1f      	cmp	r3, #31
 8000ae4:	dc00      	bgt.n	8000ae8 <__aeabi_dsub+0x374>
 8000ae6:	e6b4      	b.n	8000852 <__aeabi_dsub+0xde>
 8000ae8:	002a      	movs	r2, r5
 8000aea:	3808      	subs	r0, #8
 8000aec:	4082      	lsls	r2, r0
 8000aee:	429f      	cmp	r7, r3
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_dsub+0x380>
 8000af2:	e0b9      	b.n	8000c68 <__aeabi_dsub+0x4f4>
 8000af4:	1bdb      	subs	r3, r3, r7
 8000af6:	1c58      	adds	r0, r3, #1
 8000af8:	281f      	cmp	r0, #31
 8000afa:	dc00      	bgt.n	8000afe <__aeabi_dsub+0x38a>
 8000afc:	e1a0      	b.n	8000e40 <__aeabi_dsub+0x6cc>
 8000afe:	0015      	movs	r5, r2
 8000b00:	3b1f      	subs	r3, #31
 8000b02:	40dd      	lsrs	r5, r3
 8000b04:	2820      	cmp	r0, #32
 8000b06:	d005      	beq.n	8000b14 <__aeabi_dsub+0x3a0>
 8000b08:	2340      	movs	r3, #64	@ 0x40
 8000b0a:	1a1b      	subs	r3, r3, r0
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	1e53      	subs	r3, r2, #1
 8000b10:	419a      	sbcs	r2, r3
 8000b12:	4315      	orrs	r5, r2
 8000b14:	2307      	movs	r3, #7
 8000b16:	2700      	movs	r7, #0
 8000b18:	402b      	ands	r3, r5
 8000b1a:	e7d0      	b.n	8000abe <__aeabi_dsub+0x34a>
 8000b1c:	08c0      	lsrs	r0, r0, #3
 8000b1e:	0762      	lsls	r2, r4, #29
 8000b20:	4302      	orrs	r2, r0
 8000b22:	08e4      	lsrs	r4, r4, #3
 8000b24:	e737      	b.n	8000996 <__aeabi_dsub+0x222>
 8000b26:	08ea      	lsrs	r2, r5, #3
 8000b28:	0763      	lsls	r3, r4, #29
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	4bd3      	ldr	r3, [pc, #844]	@ (8000e7c <__aeabi_dsub+0x708>)
 8000b2e:	08e4      	lsrs	r4, r4, #3
 8000b30:	429f      	cmp	r7, r3
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0x3c2>
 8000b34:	e72f      	b.n	8000996 <__aeabi_dsub+0x222>
 8000b36:	0324      	lsls	r4, r4, #12
 8000b38:	0b25      	lsrs	r5, r4, #12
 8000b3a:	057c      	lsls	r4, r7, #21
 8000b3c:	0d64      	lsrs	r4, r4, #21
 8000b3e:	e6c2      	b.n	80008c6 <__aeabi_dsub+0x152>
 8000b40:	46ca      	mov	sl, r9
 8000b42:	0022      	movs	r2, r4
 8000b44:	4302      	orrs	r2, r0
 8000b46:	d158      	bne.n	8000bfa <__aeabi_dsub+0x486>
 8000b48:	4663      	mov	r3, ip
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	9c02      	ldr	r4, [sp, #8]
 8000b4e:	9303      	str	r3, [sp, #12]
 8000b50:	9b03      	ldr	r3, [sp, #12]
 8000b52:	4657      	mov	r7, sl
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	e7e7      	b.n	8000b28 <__aeabi_dsub+0x3b4>
 8000b58:	4cc9      	ldr	r4, [pc, #804]	@ (8000e80 <__aeabi_dsub+0x70c>)
 8000b5a:	1aff      	subs	r7, r7, r3
 8000b5c:	4014      	ands	r4, r2
 8000b5e:	e692      	b.n	8000886 <__aeabi_dsub+0x112>
 8000b60:	4dc8      	ldr	r5, [pc, #800]	@ (8000e84 <__aeabi_dsub+0x710>)
 8000b62:	1c7a      	adds	r2, r7, #1
 8000b64:	422a      	tst	r2, r5
 8000b66:	d000      	beq.n	8000b6a <__aeabi_dsub+0x3f6>
 8000b68:	e084      	b.n	8000c74 <__aeabi_dsub+0x500>
 8000b6a:	0022      	movs	r2, r4
 8000b6c:	4302      	orrs	r2, r0
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d000      	beq.n	8000b74 <__aeabi_dsub+0x400>
 8000b72:	e0ef      	b.n	8000d54 <__aeabi_dsub+0x5e0>
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dsub+0x406>
 8000b78:	e0e5      	b.n	8000d46 <__aeabi_dsub+0x5d2>
 8000b7a:	4662      	mov	r2, ip
 8000b7c:	9902      	ldr	r1, [sp, #8]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dsub+0x410>
 8000b82:	e0c5      	b.n	8000d10 <__aeabi_dsub+0x59c>
 8000b84:	4663      	mov	r3, ip
 8000b86:	18c5      	adds	r5, r0, r3
 8000b88:	468c      	mov	ip, r1
 8000b8a:	4285      	cmp	r5, r0
 8000b8c:	4180      	sbcs	r0, r0
 8000b8e:	4464      	add	r4, ip
 8000b90:	4240      	negs	r0, r0
 8000b92:	1824      	adds	r4, r4, r0
 8000b94:	0223      	lsls	r3, r4, #8
 8000b96:	d502      	bpl.n	8000b9e <__aeabi_dsub+0x42a>
 8000b98:	4bb9      	ldr	r3, [pc, #740]	@ (8000e80 <__aeabi_dsub+0x70c>)
 8000b9a:	3701      	adds	r7, #1
 8000b9c:	401c      	ands	r4, r3
 8000b9e:	46ba      	mov	sl, r7
 8000ba0:	9503      	str	r5, [sp, #12]
 8000ba2:	e7d5      	b.n	8000b50 <__aeabi_dsub+0x3dc>
 8000ba4:	4662      	mov	r2, ip
 8000ba6:	1a85      	subs	r5, r0, r2
 8000ba8:	42a8      	cmp	r0, r5
 8000baa:	4192      	sbcs	r2, r2
 8000bac:	4252      	negs	r2, r2
 8000bae:	4691      	mov	r9, r2
 8000bb0:	9b02      	ldr	r3, [sp, #8]
 8000bb2:	1ae3      	subs	r3, r4, r3
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	464b      	mov	r3, r9
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	4691      	mov	r9, r2
 8000bbe:	021a      	lsls	r2, r3, #8
 8000bc0:	d46c      	bmi.n	8000c9c <__aeabi_dsub+0x528>
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	464c      	mov	r4, r9
 8000bc6:	432a      	orrs	r2, r5
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dsub+0x458>
 8000bca:	e63a      	b.n	8000842 <__aeabi_dsub+0xce>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	e678      	b.n	80008c6 <__aeabi_dsub+0x152>
 8000bd4:	9902      	ldr	r1, [sp, #8]
 8000bd6:	4653      	mov	r3, sl
 8000bd8:	000d      	movs	r5, r1
 8000bda:	3a20      	subs	r2, #32
 8000bdc:	40d5      	lsrs	r5, r2
 8000bde:	2b20      	cmp	r3, #32
 8000be0:	d006      	beq.n	8000bf0 <__aeabi_dsub+0x47c>
 8000be2:	2240      	movs	r2, #64	@ 0x40
 8000be4:	1ad2      	subs	r2, r2, r3
 8000be6:	000b      	movs	r3, r1
 8000be8:	4093      	lsls	r3, r2
 8000bea:	4662      	mov	r2, ip
 8000bec:	431a      	orrs	r2, r3
 8000bee:	4693      	mov	fp, r2
 8000bf0:	465b      	mov	r3, fp
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	4193      	sbcs	r3, r2
 8000bf6:	431d      	orrs	r5, r3
 8000bf8:	e619      	b.n	800082e <__aeabi_dsub+0xba>
 8000bfa:	4653      	mov	r3, sl
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dsub+0x490>
 8000c02:	e0c6      	b.n	8000d92 <__aeabi_dsub+0x61e>
 8000c04:	4e9d      	ldr	r6, [pc, #628]	@ (8000e7c <__aeabi_dsub+0x708>)
 8000c06:	45b2      	cmp	sl, r6
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x498>
 8000c0a:	e6bd      	b.n	8000988 <__aeabi_dsub+0x214>
 8000c0c:	4688      	mov	r8, r1
 8000c0e:	000e      	movs	r6, r1
 8000c10:	2501      	movs	r5, #1
 8000c12:	2a38      	cmp	r2, #56	@ 0x38
 8000c14:	dc10      	bgt.n	8000c38 <__aeabi_dsub+0x4c4>
 8000c16:	2a1f      	cmp	r2, #31
 8000c18:	dc7f      	bgt.n	8000d1a <__aeabi_dsub+0x5a6>
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	0025      	movs	r5, r4
 8000c1e:	1a89      	subs	r1, r1, r2
 8000c20:	0007      	movs	r7, r0
 8000c22:	4088      	lsls	r0, r1
 8000c24:	408d      	lsls	r5, r1
 8000c26:	40d7      	lsrs	r7, r2
 8000c28:	40d4      	lsrs	r4, r2
 8000c2a:	1e41      	subs	r1, r0, #1
 8000c2c:	4188      	sbcs	r0, r1
 8000c2e:	9b02      	ldr	r3, [sp, #8]
 8000c30:	433d      	orrs	r5, r7
 8000c32:	1b1b      	subs	r3, r3, r4
 8000c34:	4305      	orrs	r5, r0
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	4662      	mov	r2, ip
 8000c3a:	1b55      	subs	r5, r2, r5
 8000c3c:	45ac      	cmp	ip, r5
 8000c3e:	4192      	sbcs	r2, r2
 8000c40:	9b02      	ldr	r3, [sp, #8]
 8000c42:	4252      	negs	r2, r2
 8000c44:	464f      	mov	r7, r9
 8000c46:	1a9c      	subs	r4, r3, r2
 8000c48:	e5f6      	b.n	8000838 <__aeabi_dsub+0xc4>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_dsub+0x4dc>
 8000c4e:	e0b7      	b.n	8000dc0 <__aeabi_dsub+0x64c>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dsub+0x4e2>
 8000c54:	e0f0      	b.n	8000e38 <__aeabi_dsub+0x6c4>
 8000c56:	2601      	movs	r6, #1
 8000c58:	400e      	ands	r6, r1
 8000c5a:	4663      	mov	r3, ip
 8000c5c:	9802      	ldr	r0, [sp, #8]
 8000c5e:	08d9      	lsrs	r1, r3, #3
 8000c60:	0742      	lsls	r2, r0, #29
 8000c62:	430a      	orrs	r2, r1
 8000c64:	08c4      	lsrs	r4, r0, #3
 8000c66:	e696      	b.n	8000996 <__aeabi_dsub+0x222>
 8000c68:	4c85      	ldr	r4, [pc, #532]	@ (8000e80 <__aeabi_dsub+0x70c>)
 8000c6a:	1aff      	subs	r7, r7, r3
 8000c6c:	4014      	ands	r4, r2
 8000c6e:	0762      	lsls	r2, r4, #29
 8000c70:	08e4      	lsrs	r4, r4, #3
 8000c72:	e760      	b.n	8000b36 <__aeabi_dsub+0x3c2>
 8000c74:	4981      	ldr	r1, [pc, #516]	@ (8000e7c <__aeabi_dsub+0x708>)
 8000c76:	428a      	cmp	r2, r1
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dsub+0x508>
 8000c7a:	e0c9      	b.n	8000e10 <__aeabi_dsub+0x69c>
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	18c1      	adds	r1, r0, r3
 8000c80:	4281      	cmp	r1, r0
 8000c82:	4180      	sbcs	r0, r0
 8000c84:	9b02      	ldr	r3, [sp, #8]
 8000c86:	4240      	negs	r0, r0
 8000c88:	18e3      	adds	r3, r4, r3
 8000c8a:	181b      	adds	r3, r3, r0
 8000c8c:	07dd      	lsls	r5, r3, #31
 8000c8e:	085c      	lsrs	r4, r3, #1
 8000c90:	2307      	movs	r3, #7
 8000c92:	0849      	lsrs	r1, r1, #1
 8000c94:	430d      	orrs	r5, r1
 8000c96:	0017      	movs	r7, r2
 8000c98:	402b      	ands	r3, r5
 8000c9a:	e710      	b.n	8000abe <__aeabi_dsub+0x34a>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	1a1d      	subs	r5, r3, r0
 8000ca0:	45ac      	cmp	ip, r5
 8000ca2:	4192      	sbcs	r2, r2
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	9b02      	ldr	r3, [sp, #8]
 8000ca8:	4252      	negs	r2, r2
 8000caa:	1b1c      	subs	r4, r3, r4
 8000cac:	4688      	mov	r8, r1
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	400e      	ands	r6, r1
 8000cb2:	e5c6      	b.n	8000842 <__aeabi_dsub+0xce>
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	18c5      	adds	r5, r0, r3
 8000cb8:	9b02      	ldr	r3, [sp, #8]
 8000cba:	4285      	cmp	r5, r0
 8000cbc:	4180      	sbcs	r0, r0
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	4240      	negs	r0, r0
 8000cc2:	4464      	add	r4, ip
 8000cc4:	1824      	adds	r4, r4, r0
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	0223      	lsls	r3, r4, #8
 8000cca:	d400      	bmi.n	8000cce <__aeabi_dsub+0x55a>
 8000ccc:	e6f5      	b.n	8000aba <__aeabi_dsub+0x346>
 8000cce:	2702      	movs	r7, #2
 8000cd0:	e641      	b.n	8000956 <__aeabi_dsub+0x1e2>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	1ac5      	subs	r5, r0, r3
 8000cd6:	42a8      	cmp	r0, r5
 8000cd8:	4180      	sbcs	r0, r0
 8000cda:	9b02      	ldr	r3, [sp, #8]
 8000cdc:	4240      	negs	r0, r0
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	2701      	movs	r7, #1
 8000ce2:	1a24      	subs	r4, r4, r0
 8000ce4:	e5a8      	b.n	8000838 <__aeabi_dsub+0xc4>
 8000ce6:	9d02      	ldr	r5, [sp, #8]
 8000ce8:	4652      	mov	r2, sl
 8000cea:	002b      	movs	r3, r5
 8000cec:	3a20      	subs	r2, #32
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b20      	cmp	r3, #32
 8000cf6:	d006      	beq.n	8000d06 <__aeabi_dsub+0x592>
 8000cf8:	2240      	movs	r2, #64	@ 0x40
 8000cfa:	1ad2      	subs	r2, r2, r3
 8000cfc:	002b      	movs	r3, r5
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	4662      	mov	r2, ip
 8000d02:	431a      	orrs	r2, r3
 8000d04:	4693      	mov	fp, r2
 8000d06:	465d      	mov	r5, fp
 8000d08:	1e6b      	subs	r3, r5, #1
 8000d0a:	419d      	sbcs	r5, r3
 8000d0c:	430d      	orrs	r5, r1
 8000d0e:	e615      	b.n	800093c <__aeabi_dsub+0x1c8>
 8000d10:	0762      	lsls	r2, r4, #29
 8000d12:	08c0      	lsrs	r0, r0, #3
 8000d14:	4302      	orrs	r2, r0
 8000d16:	08e4      	lsrs	r4, r4, #3
 8000d18:	e70d      	b.n	8000b36 <__aeabi_dsub+0x3c2>
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0027      	movs	r7, r4
 8000d1e:	3920      	subs	r1, #32
 8000d20:	40cf      	lsrs	r7, r1
 8000d22:	2a20      	cmp	r2, #32
 8000d24:	d005      	beq.n	8000d32 <__aeabi_dsub+0x5be>
 8000d26:	2140      	movs	r1, #64	@ 0x40
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	4094      	lsls	r4, r2
 8000d2c:	0025      	movs	r5, r4
 8000d2e:	4305      	orrs	r5, r0
 8000d30:	9503      	str	r5, [sp, #12]
 8000d32:	9d03      	ldr	r5, [sp, #12]
 8000d34:	1e6a      	subs	r2, r5, #1
 8000d36:	4195      	sbcs	r5, r2
 8000d38:	433d      	orrs	r5, r7
 8000d3a:	e77d      	b.n	8000c38 <__aeabi_dsub+0x4c4>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dsub+0x5ce>
 8000d40:	e744      	b.n	8000bcc <__aeabi_dsub+0x458>
 8000d42:	2601      	movs	r6, #1
 8000d44:	400e      	ands	r6, r1
 8000d46:	4663      	mov	r3, ip
 8000d48:	08d9      	lsrs	r1, r3, #3
 8000d4a:	9b02      	ldr	r3, [sp, #8]
 8000d4c:	075a      	lsls	r2, r3, #29
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	08dc      	lsrs	r4, r3, #3
 8000d52:	e6f0      	b.n	8000b36 <__aeabi_dsub+0x3c2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d028      	beq.n	8000daa <__aeabi_dsub+0x636>
 8000d58:	4662      	mov	r2, ip
 8000d5a:	9f02      	ldr	r7, [sp, #8]
 8000d5c:	08c0      	lsrs	r0, r0, #3
 8000d5e:	433a      	orrs	r2, r7
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dsub+0x5f0>
 8000d62:	e6dc      	b.n	8000b1e <__aeabi_dsub+0x3aa>
 8000d64:	0762      	lsls	r2, r4, #29
 8000d66:	4310      	orrs	r0, r2
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	08e4      	lsrs	r4, r4, #3
 8000d6c:	0312      	lsls	r2, r2, #12
 8000d6e:	4214      	tst	r4, r2
 8000d70:	d009      	beq.n	8000d86 <__aeabi_dsub+0x612>
 8000d72:	08fd      	lsrs	r5, r7, #3
 8000d74:	4215      	tst	r5, r2
 8000d76:	d106      	bne.n	8000d86 <__aeabi_dsub+0x612>
 8000d78:	4663      	mov	r3, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	002c      	movs	r4, r5
 8000d7e:	08d8      	lsrs	r0, r3, #3
 8000d80:	077b      	lsls	r3, r7, #29
 8000d82:	4318      	orrs	r0, r3
 8000d84:	400e      	ands	r6, r1
 8000d86:	0f42      	lsrs	r2, r0, #29
 8000d88:	00c0      	lsls	r0, r0, #3
 8000d8a:	08c0      	lsrs	r0, r0, #3
 8000d8c:	0752      	lsls	r2, r2, #29
 8000d8e:	4302      	orrs	r2, r0
 8000d90:	e601      	b.n	8000996 <__aeabi_dsub+0x222>
 8000d92:	4663      	mov	r3, ip
 8000d94:	1a1d      	subs	r5, r3, r0
 8000d96:	45ac      	cmp	ip, r5
 8000d98:	4192      	sbcs	r2, r2
 8000d9a:	9b02      	ldr	r3, [sp, #8]
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	1b1c      	subs	r4, r3, r4
 8000da0:	000e      	movs	r6, r1
 8000da2:	4688      	mov	r8, r1
 8000da4:	2701      	movs	r7, #1
 8000da6:	1aa4      	subs	r4, r4, r2
 8000da8:	e546      	b.n	8000838 <__aeabi_dsub+0xc4>
 8000daa:	4663      	mov	r3, ip
 8000dac:	08d9      	lsrs	r1, r3, #3
 8000dae:	9b02      	ldr	r3, [sp, #8]
 8000db0:	075a      	lsls	r2, r3, #29
 8000db2:	430a      	orrs	r2, r1
 8000db4:	08dc      	lsrs	r4, r3, #3
 8000db6:	e5ee      	b.n	8000996 <__aeabi_dsub+0x222>
 8000db8:	4663      	mov	r3, ip
 8000dba:	9c02      	ldr	r4, [sp, #8]
 8000dbc:	9303      	str	r3, [sp, #12]
 8000dbe:	e6c7      	b.n	8000b50 <__aeabi_dsub+0x3dc>
 8000dc0:	08c0      	lsrs	r0, r0, #3
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_dsub+0x654>
 8000dc6:	e6aa      	b.n	8000b1e <__aeabi_dsub+0x3aa>
 8000dc8:	0762      	lsls	r2, r4, #29
 8000dca:	4310      	orrs	r0, r2
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	08e4      	lsrs	r4, r4, #3
 8000dd0:	0312      	lsls	r2, r2, #12
 8000dd2:	4214      	tst	r4, r2
 8000dd4:	d0d7      	beq.n	8000d86 <__aeabi_dsub+0x612>
 8000dd6:	9f02      	ldr	r7, [sp, #8]
 8000dd8:	08fd      	lsrs	r5, r7, #3
 8000dda:	4215      	tst	r5, r2
 8000ddc:	d1d3      	bne.n	8000d86 <__aeabi_dsub+0x612>
 8000dde:	4663      	mov	r3, ip
 8000de0:	2601      	movs	r6, #1
 8000de2:	08d8      	lsrs	r0, r3, #3
 8000de4:	077b      	lsls	r3, r7, #29
 8000de6:	002c      	movs	r4, r5
 8000de8:	4318      	orrs	r0, r3
 8000dea:	400e      	ands	r6, r1
 8000dec:	e7cb      	b.n	8000d86 <__aeabi_dsub+0x612>
 8000dee:	000a      	movs	r2, r1
 8000df0:	0027      	movs	r7, r4
 8000df2:	3a20      	subs	r2, #32
 8000df4:	40d7      	lsrs	r7, r2
 8000df6:	2920      	cmp	r1, #32
 8000df8:	d005      	beq.n	8000e06 <__aeabi_dsub+0x692>
 8000dfa:	2240      	movs	r2, #64	@ 0x40
 8000dfc:	1a52      	subs	r2, r2, r1
 8000dfe:	4094      	lsls	r4, r2
 8000e00:	0025      	movs	r5, r4
 8000e02:	4305      	orrs	r5, r0
 8000e04:	9503      	str	r5, [sp, #12]
 8000e06:	9d03      	ldr	r5, [sp, #12]
 8000e08:	1e6a      	subs	r2, r5, #1
 8000e0a:	4195      	sbcs	r5, r2
 8000e0c:	432f      	orrs	r7, r5
 8000e0e:	e610      	b.n	8000a32 <__aeabi_dsub+0x2be>
 8000e10:	0014      	movs	r4, r2
 8000e12:	2500      	movs	r5, #0
 8000e14:	2200      	movs	r2, #0
 8000e16:	e556      	b.n	80008c6 <__aeabi_dsub+0x152>
 8000e18:	9b02      	ldr	r3, [sp, #8]
 8000e1a:	4460      	add	r0, ip
 8000e1c:	4699      	mov	r9, r3
 8000e1e:	4560      	cmp	r0, ip
 8000e20:	4192      	sbcs	r2, r2
 8000e22:	444c      	add	r4, r9
 8000e24:	4252      	negs	r2, r2
 8000e26:	0005      	movs	r5, r0
 8000e28:	18a4      	adds	r4, r4, r2
 8000e2a:	e74c      	b.n	8000cc6 <__aeabi_dsub+0x552>
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	001c      	movs	r4, r3
 8000e30:	432a      	orrs	r2, r5
 8000e32:	d000      	beq.n	8000e36 <__aeabi_dsub+0x6c2>
 8000e34:	e6b3      	b.n	8000b9e <__aeabi_dsub+0x42a>
 8000e36:	e6c9      	b.n	8000bcc <__aeabi_dsub+0x458>
 8000e38:	2480      	movs	r4, #128	@ 0x80
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	e5ae      	b.n	800099e <__aeabi_dsub+0x22a>
 8000e40:	2120      	movs	r1, #32
 8000e42:	2500      	movs	r5, #0
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	e517      	b.n	8000878 <__aeabi_dsub+0x104>
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	@ (8000e7c <__aeabi_dsub+0x708>)
 8000e4e:	e53a      	b.n	80008c6 <__aeabi_dsub+0x152>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dsub+0x6e2>
 8000e54:	e5f6      	b.n	8000a44 <__aeabi_dsub+0x2d0>
 8000e56:	464b      	mov	r3, r9
 8000e58:	1bda      	subs	r2, r3, r7
 8000e5a:	4692      	mov	sl, r2
 8000e5c:	2f00      	cmp	r7, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dsub+0x6ee>
 8000e60:	e66f      	b.n	8000b42 <__aeabi_dsub+0x3ce>
 8000e62:	2a38      	cmp	r2, #56	@ 0x38
 8000e64:	dc05      	bgt.n	8000e72 <__aeabi_dsub+0x6fe>
 8000e66:	2680      	movs	r6, #128	@ 0x80
 8000e68:	0436      	lsls	r6, r6, #16
 8000e6a:	4334      	orrs	r4, r6
 8000e6c:	4688      	mov	r8, r1
 8000e6e:	000e      	movs	r6, r1
 8000e70:	e6d1      	b.n	8000c16 <__aeabi_dsub+0x4a2>
 8000e72:	4688      	mov	r8, r1
 8000e74:	000e      	movs	r6, r1
 8000e76:	2501      	movs	r5, #1
 8000e78:	e6de      	b.n	8000c38 <__aeabi_dsub+0x4c4>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	000007ff 	.word	0x000007ff
 8000e80:	ff7fffff 	.word	0xff7fffff
 8000e84:	000007fe 	.word	0x000007fe
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_dsub+0x71a>
 8000e8c:	e668      	b.n	8000b60 <__aeabi_dsub+0x3ec>
 8000e8e:	464b      	mov	r3, r9
 8000e90:	1bd9      	subs	r1, r3, r7
 8000e92:	2f00      	cmp	r7, #0
 8000e94:	d101      	bne.n	8000e9a <__aeabi_dsub+0x726>
 8000e96:	468a      	mov	sl, r1
 8000e98:	e5a7      	b.n	80009ea <__aeabi_dsub+0x276>
 8000e9a:	2701      	movs	r7, #1
 8000e9c:	2938      	cmp	r1, #56	@ 0x38
 8000e9e:	dd00      	ble.n	8000ea2 <__aeabi_dsub+0x72e>
 8000ea0:	e5c7      	b.n	8000a32 <__aeabi_dsub+0x2be>
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	0412      	lsls	r2, r2, #16
 8000ea6:	4314      	orrs	r4, r2
 8000ea8:	e5af      	b.n	8000a0a <__aeabi_dsub+0x296>
 8000eaa:	46c0      	nop			@ (mov r8, r8)

08000eac <__aeabi_f2d>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	0043      	lsls	r3, r0, #1
 8000eb2:	0fc4      	lsrs	r4, r0, #31
 8000eb4:	20fe      	movs	r0, #254	@ 0xfe
 8000eb6:	0e1b      	lsrs	r3, r3, #24
 8000eb8:	1c59      	adds	r1, r3, #1
 8000eba:	0a55      	lsrs	r5, r2, #9
 8000ebc:	4208      	tst	r0, r1
 8000ebe:	d00c      	beq.n	8000eda <__aeabi_f2d+0x2e>
 8000ec0:	21e0      	movs	r1, #224	@ 0xe0
 8000ec2:	0089      	lsls	r1, r1, #2
 8000ec4:	468c      	mov	ip, r1
 8000ec6:	076d      	lsls	r5, r5, #29
 8000ec8:	0b12      	lsrs	r2, r2, #12
 8000eca:	4463      	add	r3, ip
 8000ecc:	051b      	lsls	r3, r3, #20
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	07e4      	lsls	r4, r4, #31
 8000ed2:	4323      	orrs	r3, r4
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <__aeabi_f2d+0x5c>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d01b      	beq.n	8000f1a <__aeabi_f2d+0x6e>
 8000ee2:	0028      	movs	r0, r5
 8000ee4:	f000 f8ae 	bl	8001044 <__clzsi2>
 8000ee8:	280a      	cmp	r0, #10
 8000eea:	dc1c      	bgt.n	8000f26 <__aeabi_f2d+0x7a>
 8000eec:	230b      	movs	r3, #11
 8000eee:	002a      	movs	r2, r5
 8000ef0:	1a1b      	subs	r3, r3, r0
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	3315      	adds	r3, #21
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <__aeabi_f2d+0x88>)
 8000efc:	0312      	lsls	r2, r2, #12
 8000efe:	1a1b      	subs	r3, r3, r0
 8000f00:	055b      	lsls	r3, r3, #21
 8000f02:	0b12      	lsrs	r2, r2, #12
 8000f04:	0d5b      	lsrs	r3, r3, #21
 8000f06:	e7e1      	b.n	8000ecc <__aeabi_f2d+0x20>
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d009      	beq.n	8000f20 <__aeabi_f2d+0x74>
 8000f0c:	0b13      	lsrs	r3, r2, #12
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	0312      	lsls	r2, r2, #12
 8000f12:	431a      	orrs	r2, r3
 8000f14:	076d      	lsls	r5, r5, #29
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <__aeabi_f2d+0x8c>)
 8000f18:	e7d8      	b.n	8000ecc <__aeabi_f2d+0x20>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e7d5      	b.n	8000ecc <__aeabi_f2d+0x20>
 8000f20:	2200      	movs	r2, #0
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <__aeabi_f2d+0x8c>)
 8000f24:	e7d2      	b.n	8000ecc <__aeabi_f2d+0x20>
 8000f26:	0003      	movs	r3, r0
 8000f28:	002a      	movs	r2, r5
 8000f2a:	3b0b      	subs	r3, #11
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	2500      	movs	r5, #0
 8000f30:	e7e3      	b.n	8000efa <__aeabi_f2d+0x4e>
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	00000389 	.word	0x00000389
 8000f38:	000007ff 	.word	0x000007ff

08000f3c <__aeabi_d2f>:
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	004b      	lsls	r3, r1, #1
 8000f40:	030f      	lsls	r7, r1, #12
 8000f42:	0d5b      	lsrs	r3, r3, #21
 8000f44:	4c3b      	ldr	r4, [pc, #236]	@ (8001034 <__aeabi_d2f+0xf8>)
 8000f46:	0f45      	lsrs	r5, r0, #29
 8000f48:	b083      	sub	sp, #12
 8000f4a:	0a7f      	lsrs	r7, r7, #9
 8000f4c:	1c5e      	adds	r6, r3, #1
 8000f4e:	432f      	orrs	r7, r5
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	9101      	str	r1, [sp, #4]
 8000f54:	0fca      	lsrs	r2, r1, #31
 8000f56:	00c5      	lsls	r5, r0, #3
 8000f58:	4226      	tst	r6, r4
 8000f5a:	d00b      	beq.n	8000f74 <__aeabi_d2f+0x38>
 8000f5c:	4936      	ldr	r1, [pc, #216]	@ (8001038 <__aeabi_d2f+0xfc>)
 8000f5e:	185c      	adds	r4, r3, r1
 8000f60:	2cfe      	cmp	r4, #254	@ 0xfe
 8000f62:	dd13      	ble.n	8000f8c <__aeabi_d2f+0x50>
 8000f64:	20ff      	movs	r0, #255	@ 0xff
 8000f66:	2300      	movs	r3, #0
 8000f68:	05c0      	lsls	r0, r0, #23
 8000f6a:	4318      	orrs	r0, r3
 8000f6c:	07d2      	lsls	r2, r2, #31
 8000f6e:	4310      	orrs	r0, r2
 8000f70:	b003      	add	sp, #12
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <__aeabi_d2f+0x42>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e7f4      	b.n	8000f68 <__aeabi_d2f+0x2c>
 8000f7e:	433d      	orrs	r5, r7
 8000f80:	d0f0      	beq.n	8000f64 <__aeabi_d2f+0x28>
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	03db      	lsls	r3, r3, #15
 8000f86:	20ff      	movs	r0, #255	@ 0xff
 8000f88:	433b      	orrs	r3, r7
 8000f8a:	e7ed      	b.n	8000f68 <__aeabi_d2f+0x2c>
 8000f8c:	2c00      	cmp	r4, #0
 8000f8e:	dd14      	ble.n	8000fba <__aeabi_d2f+0x7e>
 8000f90:	9b00      	ldr	r3, [sp, #0]
 8000f92:	00ff      	lsls	r7, r7, #3
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	1e58      	subs	r0, r3, #1
 8000f98:	4183      	sbcs	r3, r0
 8000f9a:	0f69      	lsrs	r1, r5, #29
 8000f9c:	433b      	orrs	r3, r7
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	d041      	beq.n	8001028 <__aeabi_d2f+0xec>
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	2904      	cmp	r1, #4
 8000faa:	d028      	beq.n	8000ffe <__aeabi_d2f+0xc2>
 8000fac:	3304      	adds	r3, #4
 8000fae:	0159      	lsls	r1, r3, #5
 8000fb0:	d525      	bpl.n	8000ffe <__aeabi_d2f+0xc2>
 8000fb2:	3401      	adds	r4, #1
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	b2e0      	uxtb	r0, r4
 8000fb8:	e7d6      	b.n	8000f68 <__aeabi_d2f+0x2c>
 8000fba:	0021      	movs	r1, r4
 8000fbc:	3117      	adds	r1, #23
 8000fbe:	dbdb      	blt.n	8000f78 <__aeabi_d2f+0x3c>
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	201e      	movs	r0, #30
 8000fc4:	0409      	lsls	r1, r1, #16
 8000fc6:	4339      	orrs	r1, r7
 8000fc8:	1b00      	subs	r0, r0, r4
 8000fca:	281f      	cmp	r0, #31
 8000fcc:	dd1b      	ble.n	8001006 <__aeabi_d2f+0xca>
 8000fce:	2602      	movs	r6, #2
 8000fd0:	4276      	negs	r6, r6
 8000fd2:	1b34      	subs	r4, r6, r4
 8000fd4:	000e      	movs	r6, r1
 8000fd6:	40e6      	lsrs	r6, r4
 8000fd8:	0034      	movs	r4, r6
 8000fda:	2820      	cmp	r0, #32
 8000fdc:	d004      	beq.n	8000fe8 <__aeabi_d2f+0xac>
 8000fde:	4817      	ldr	r0, [pc, #92]	@ (800103c <__aeabi_d2f+0x100>)
 8000fe0:	4684      	mov	ip, r0
 8000fe2:	4463      	add	r3, ip
 8000fe4:	4099      	lsls	r1, r3
 8000fe6:	430d      	orrs	r5, r1
 8000fe8:	002b      	movs	r3, r5
 8000fea:	1e59      	subs	r1, r3, #1
 8000fec:	418b      	sbcs	r3, r1
 8000fee:	4323      	orrs	r3, r4
 8000ff0:	0759      	lsls	r1, r3, #29
 8000ff2:	d015      	beq.n	8001020 <__aeabi_d2f+0xe4>
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	4019      	ands	r1, r3
 8000ffa:	2904      	cmp	r1, #4
 8000ffc:	d117      	bne.n	800102e <__aeabi_d2f+0xf2>
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	0a5b      	lsrs	r3, r3, #9
 8001002:	b2e0      	uxtb	r0, r4
 8001004:	e7b0      	b.n	8000f68 <__aeabi_d2f+0x2c>
 8001006:	4c0e      	ldr	r4, [pc, #56]	@ (8001040 <__aeabi_d2f+0x104>)
 8001008:	191c      	adds	r4, r3, r4
 800100a:	002b      	movs	r3, r5
 800100c:	40a5      	lsls	r5, r4
 800100e:	40c3      	lsrs	r3, r0
 8001010:	40a1      	lsls	r1, r4
 8001012:	1e68      	subs	r0, r5, #1
 8001014:	4185      	sbcs	r5, r0
 8001016:	4329      	orrs	r1, r5
 8001018:	430b      	orrs	r3, r1
 800101a:	2400      	movs	r4, #0
 800101c:	0759      	lsls	r1, r3, #29
 800101e:	d1c1      	bne.n	8000fa4 <__aeabi_d2f+0x68>
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	2000      	movs	r0, #0
 8001024:	0a5b      	lsrs	r3, r3, #9
 8001026:	e79f      	b.n	8000f68 <__aeabi_d2f+0x2c>
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	b2e0      	uxtb	r0, r4
 800102c:	e79c      	b.n	8000f68 <__aeabi_d2f+0x2c>
 800102e:	3304      	adds	r3, #4
 8001030:	e7e5      	b.n	8000ffe <__aeabi_d2f+0xc2>
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	000007fe 	.word	0x000007fe
 8001038:	fffffc80 	.word	0xfffffc80
 800103c:	fffffca2 	.word	0xfffffca2
 8001040:	fffffc82 	.word	0xfffffc82

08001044 <__clzsi2>:
 8001044:	211c      	movs	r1, #28
 8001046:	2301      	movs	r3, #1
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	4298      	cmp	r0, r3
 800104c:	d301      	bcc.n	8001052 <__clzsi2+0xe>
 800104e:	0c00      	lsrs	r0, r0, #16
 8001050:	3910      	subs	r1, #16
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	4298      	cmp	r0, r3
 8001056:	d301      	bcc.n	800105c <__clzsi2+0x18>
 8001058:	0a00      	lsrs	r0, r0, #8
 800105a:	3908      	subs	r1, #8
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	4298      	cmp	r0, r3
 8001060:	d301      	bcc.n	8001066 <__clzsi2+0x22>
 8001062:	0900      	lsrs	r0, r0, #4
 8001064:	3904      	subs	r1, #4
 8001066:	a202      	add	r2, pc, #8	@ (adr r2, 8001070 <__clzsi2+0x2c>)
 8001068:	5c10      	ldrb	r0, [r2, r0]
 800106a:	1840      	adds	r0, r0, r1
 800106c:	4770      	bx	lr
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	02020304 	.word	0x02020304
 8001074:	01010101 	.word	0x01010101
	...

08001080 <Ads1118_Configure>:

	GPIO_TypeDef *cs_gpio_port;
	uint16_t cs_pin;
} Ads1118TypeDef;

HAL_StatusTypeDef Ads1118_Configure(Ads1118TypeDef *adc) {
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(adc->cs_gpio_port, adc->cs_pin, GPIO_PIN_RESET);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	899b      	ldrh	r3, [r3, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	0019      	movs	r1, r3
 8001094:	f002 f8a1 	bl	80031da <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 fdc7 	bl	8001c2c <HAL_Delay>

  uint32_t out = adc->config | (((uint32_t)adc->config)<<16); // Transmit 16 bit config twice for a 32 bit transmission sequence
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	001a      	movs	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(adc->hspi, (uint8_t*)&out, 4);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	220f      	movs	r2, #15
 80010b2:	18bc      	adds	r4, r7, r2
 80010b4:	2208      	movs	r2, #8
 80010b6:	18b9      	adds	r1, r7, r2
 80010b8:	2204      	movs	r2, #4
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 fe50 	bl	8003d60 <HAL_SPI_Transmit_DMA>
 80010c0:	0003      	movs	r3, r0
 80010c2:	7023      	strb	r3, [r4, #0]
  while(1) {
	  if (status != HAL_OK) {
 80010c4:	240f      	movs	r4, #15
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <Ads1118_Configure+0x64>
		  HAL_GPIO_WritePin(adc->cs_gpio_port, adc->cs_pin, GPIO_PIN_SET);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6898      	ldr	r0, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	0019      	movs	r1, r3
 80010da:	f002 f87e 	bl	80031da <HAL_GPIO_WritePin>
		  return status;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e024      	b.n	800112e <Ads1118_Configure+0xae>
	  }
    if (adc->hspi->State != HAL_SPI_STATE_BUSY) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	225d      	movs	r2, #93	@ 0x5d
 80010ea:	5c9b      	ldrb	r3, [r3, r2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d100      	bne.n	80010f4 <Ads1118_Configure+0x74>
	  if (status != HAL_OK) {
 80010f2:	e7e7      	b.n	80010c4 <Ads1118_Configure+0x44>
      break;
 80010f4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  // Reset ADC SPI
	HAL_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fd98 	bl	8001c2c <HAL_Delay>
    HAL_GPIO_WritePin(adc->cs_gpio_port, adc->cs_pin, GPIO_PIN_SET);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6898      	ldr	r0, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	899b      	ldrh	r3, [r3, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	0019      	movs	r1, r3
 8001108:	f002 f867 	bl	80031da <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fd8d 	bl	8001c2c <HAL_Delay>
	HAL_GPIO_WritePin(adc->cs_gpio_port, adc->cs_pin, GPIO_PIN_RESET);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6898      	ldr	r0, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	899b      	ldrh	r3, [r3, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	0019      	movs	r1, r3
 800111e:	f002 f85c 	bl	80031da <HAL_GPIO_WritePin>
	HAL_Delay(1); // 100ns CS rising edge propagation delay per ADS1118 datasheet
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fd82 	bl	8001c2c <HAL_Delay>

	return status;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781b      	ldrb	r3, [r3, #0]
}
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b005      	add	sp, #20
 8001134:	bd90      	pop	{r4, r7, pc}

08001136 <Ads1118_Transmit>:

HAL_StatusTypeDef Ads1118_Transmit(Ads1118TypeDef *adc, uint32_t *data) {
 8001136:	b5b0      	push	{r4, r5, r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
    uint32_t out = adc->config | (((uint32_t)adc->config)<<16); // Transmit 16 bit config twice for a 32 bit transmission sequence
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	0013      	movs	r3, r2
 8001148:	041b      	lsls	r3, r3, #16
 800114a:	189b      	adds	r3, r3, r2
 800114c:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(adc->hspi, (uint8_t*)&out, (uint8_t*)data, ADS1118_SPI_SIZE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6858      	ldr	r0, [r3, #4]
 8001152:	250f      	movs	r5, #15
 8001154:	197c      	adds	r4, r7, r5
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	2308      	movs	r3, #8
 800115a:	18f9      	adds	r1, r7, r3
 800115c:	2304      	movs	r3, #4
 800115e:	f002 ff01 	bl	8003f64 <HAL_SPI_TransmitReceive_DMA>
 8001162:	0003      	movs	r3, r0
 8001164:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
    }
	return status;
 8001166:	197b      	adds	r3, r7, r5
 8001168:	781b      	ldrb	r3, [r3, #0]
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fcf3 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f8cf 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 f9cf 	bl	8001524 <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f000 f9af 	bl	80014e8 <MX_DMA_Init>
  MX_CAN_Init();
 800118a:	f000 f911 	bl	80013b0 <MX_CAN_Init>
  MX_SPI1_Init();
 800118e:	f000 f947 	bl	8001420 <MX_SPI1_Init>
  MX_TIM14_Init();
 8001192:	f000 f983 	bl	800149c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef filter;
  filter.FilterMaskIdHigh = 0x0;
 8001196:	210c      	movs	r1, #12
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0x0;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
  filter.FilterBank = 0;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  filter.FilterActivation = CAN_FILTER_ENABLE;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2201      	movs	r2, #1
 80011c0:	621a      	str	r2, [r3, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	4b48      	ldr	r3, [pc, #288]	@ (80012e8 <main+0x174>)
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f000 fe51 	bl	8001e70 <HAL_CAN_ConfigFilter>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d001      	beq.n	80011d6 <main+0x62>
      Error_Handler();
 80011d2:	f000 fac1 	bl	8001758 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)) {
 80011d6:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <main+0x174>)
 80011d8:	2102      	movs	r1, #2
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 f97d 	bl	80024da <HAL_CAN_ActivateNotification>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d001      	beq.n	80011e8 <main+0x74>
    Error_Handler();
 80011e4:	f000 fab8 	bl	8001758 <Error_Handler>
  };

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80011e8:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <main+0x174>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 ff32 	bl	8002054 <HAL_CAN_Start>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <main+0x84>
      Error_Handler();
 80011f4:	f000 fab0 	bl	8001758 <Error_Handler>
  }

  // Configure ADC
  adc.hspi = &hspi1;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <main+0x178>)
 80011fa:	4a3d      	ldr	r2, [pc, #244]	@ (80012f0 <main+0x17c>)
 80011fc:	605a      	str	r2, [r3, #4]
  adc.cs_gpio_port = ADC_CS_GPIO_Port;
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <main+0x178>)
 8001200:	2290      	movs	r2, #144	@ 0x90
 8001202:	05d2      	lsls	r2, r2, #23
 8001204:	609a      	str	r2, [r3, #8]
  adc.cs_pin = ADC_CS_Pin;
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <main+0x178>)
 8001208:	4a3a      	ldr	r2, [pc, #232]	@ (80012f4 <main+0x180>)
 800120a:	819a      	strh	r2, [r3, #12]
  adc.config = (ADS1118_CONFIG_DEFAULT | (0b111 << ADS1118_CONFIG_BIT_MUX) | (1 << ADS1118_CONFIG_BIT_SS) | (0b000 << 9)) & 0xFBFF;
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <main+0x178>)
 800120e:	4a3a      	ldr	r2, [pc, #232]	@ (80012f8 <main+0x184>)
 8001210:	801a      	strh	r2, [r3, #0]
  Ads1118_Configure(&adc);
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <main+0x178>)
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ff33 	bl	8001080 <Ads1118_Configure>

  // Start peripherals
//  HAL_ADC_Start(&hadc);
  HAL_TIM_Base_Start_IT(&htim14);
 800121a:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <main+0x188>)
 800121c:	0018      	movs	r0, r3
 800121e:	f003 fce7 	bl	8004bf0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buf[] = { 0, 0 };
 8001222:	2108      	movs	r1, #8
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	805a      	strh	r2, [r3, #2]
  float v_fs = 6.144f;
 8001230:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <main+0x18c>)
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
  float res = 0.0f;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]

  while (1)
  {
      if (adc_read_cplt && (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))) {
 8001238:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <main+0x190>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03d      	beq.n	80012be <main+0x14a>
 8001242:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <main+0x194>)
 8001244:	2110      	movs	r1, #16
 8001246:	0018      	movs	r0, r3
 8001248:	f001 ffaa 	bl	80031a0 <HAL_GPIO_ReadPin>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d136      	bne.n	80012be <main+0x14a>
    	  // Update ADC config readback
    	  adc.config_readback = buf[1];
 8001250:	2508      	movs	r5, #8
 8001252:	197b      	adds	r3, r7, r5
 8001254:	2202      	movs	r2, #2
 8001256:	5e9b      	ldrsh	r3, [r3, r2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <main+0x178>)
 800125c:	805a      	strh	r2, [r3, #2]

    	  // Send measurement over CAN
          res = (v_fs/(0x7FFF))*(float)buf[0]; // Convert from ADC output to voltage
 800125e:	492b      	ldr	r1, [pc, #172]	@ (800130c <main+0x198>)
 8001260:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001262:	f7fe ffdd 	bl	8000220 <__aeabi_fdiv>
 8001266:	1c03      	adds	r3, r0, #0
 8001268:	1c1c      	adds	r4, r3, #0
 800126a:	197b      	adds	r3, r7, r5
 800126c:	2200      	movs	r2, #0
 800126e:	5e9b      	ldrsh	r3, [r3, r2]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fa33 	bl	80006dc <__aeabi_i2f>
 8001276:	1c03      	adds	r3, r0, #0
 8001278:	1c19      	adds	r1, r3, #0
 800127a:	1c20      	adds	r0, r4, #0
 800127c:	f7ff f8f0 	bl	8000460 <__aeabi_fmul>
 8001280:	1c03      	adds	r3, r0, #0
 8001282:	607b      	str	r3, [r7, #4]
          res = 251.493315f * res - 122.744008;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4922      	ldr	r1, [pc, #136]	@ (8001310 <main+0x19c>)
 8001288:	1c18      	adds	r0, r3, #0
 800128a:	f7ff f8e9 	bl	8000460 <__aeabi_fmul>
 800128e:	1c03      	adds	r3, r0, #0
 8001290:	1c18      	adds	r0, r3, #0
 8001292:	f7ff fe0b 	bl	8000eac <__aeabi_f2d>
 8001296:	4a1f      	ldr	r2, [pc, #124]	@ (8001314 <main+0x1a0>)
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <main+0x1a4>)
 800129a:	f7ff fa6b 	bl	8000774 <__aeabi_dsub>
 800129e:	0002      	movs	r2, r0
 80012a0:	000b      	movs	r3, r1
 80012a2:	0010      	movs	r0, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	f7ff fe49 	bl	8000f3c <__aeabi_d2f>
 80012aa:	1c03      	adds	r3, r0, #0
 80012ac:	607b      	str	r3, [r7, #4]
//          res = (res - pt.min_voltage) * (pt.max_pressure - pt.min_pressure) / (pt.max_voltage - pt.min_voltage); // Convert to pressure
//          res = 100 * res / (0.002 * 5); // Convert to kg
          send_can_msg((uint8_t*)(&res), sizeof(res));
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2104      	movs	r1, #4
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 f9a8 	bl	8001608 <send_can_msg>

          adc_read_cplt = 0;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <main+0x190>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
      }

      if (start_read_adc) {
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <main+0x1a8>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0b7      	beq.n	8001238 <main+0xc4>
    	  // Start new single shot
        if (Ads1118_Transmit(&adc, (uint32_t*)&buf) != HAL_OK) {
 80012c8:	2308      	movs	r3, #8
 80012ca:	18fa      	adds	r2, r7, r3
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <main+0x178>)
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff30 	bl	8001136 <Ads1118_Transmit>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <main+0x16a>
          Error_Handler();
 80012da:	f000 fa3d 	bl	8001758 <Error_Handler>
        }

         start_read_adc = 0;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <main+0x1a8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
      if (adc_read_cplt && (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))) {
 80012e4:	e7a8      	b.n	8001238 <main+0xc4>
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000038 	.word	0x20000038
 80012ec:	20000194 	.word	0x20000194
 80012f0:	20000060 	.word	0x20000060
 80012f4:	ffff8000 	.word	0xffff8000
 80012f8:	fffff18b 	.word	0xfffff18b
 80012fc:	2000014c 	.word	0x2000014c
 8001300:	40c49ba6 	.word	0x40c49ba6
 8001304:	200001a5 	.word	0x200001a5
 8001308:	48000400 	.word	0x48000400
 800130c:	46fffe00 	.word	0x46fffe00
 8001310:	437b7e4a 	.word	0x437b7e4a
 8001314:	d3bafd97 	.word	0xd3bafd97
 8001318:	405eaf9d 	.word	0x405eaf9d
 800131c:	200001a4 	.word	0x200001a4

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b093      	sub	sp, #76	@ 0x4c
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	2414      	movs	r4, #20
 8001328:	193b      	adds	r3, r7, r4
 800132a:	0018      	movs	r0, r3
 800132c:	2334      	movs	r3, #52	@ 0x34
 800132e:	001a      	movs	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	f003 fe4b 	bl	8004fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	0018      	movs	r0, r3
 800133a:	2310      	movs	r3, #16
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f003 fe44 	bl	8004fcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	0021      	movs	r1, r4
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2201      	movs	r2, #1
 8001350:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2202      	movs	r2, #2
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2280      	movs	r2, #128	@ 0x80
 800135c:	0252      	lsls	r2, r2, #9
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	0352      	lsls	r2, r2, #13
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	187b      	adds	r3, r7, r1
 8001370:	0018      	movs	r0, r3
 8001372:	f001 ff6b 	bl	800324c <HAL_RCC_OscConfig>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800137a:	f000 f9ed 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2202      	movs	r2, #2
 8001388:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2101      	movs	r1, #1
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fadc 	bl	8003958 <HAL_RCC_ClockConfig>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013a4:	f000 f9d8 	bl	8001758 <Error_Handler>
  }
}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b013      	add	sp, #76	@ 0x4c
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_CAN_Init+0x68>)
 80013b6:	4a19      	ldr	r2, [pc, #100]	@ (800141c <MX_CAN_Init+0x6c>)
 80013b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_CAN_Init+0x68>)
 80013bc:	2206      	movs	r2, #6
 80013be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_CAN_Init+0x68>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_CAN_Init+0x68>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_CAN_Init+0x68>)
 80013ce:	22c0      	movs	r2, #192	@ 0xc0
 80013d0:	0312      	lsls	r2, r2, #12
 80013d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_CAN_Init+0x68>)
 80013d6:	2280      	movs	r2, #128	@ 0x80
 80013d8:	0352      	lsls	r2, r2, #13
 80013da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_CAN_Init+0x68>)
 80013de:	2200      	movs	r2, #0
 80013e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <MX_CAN_Init+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_CAN_Init+0x68>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <MX_CAN_Init+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_CAN_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <MX_CAN_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <MX_CAN_Init+0x68>)
 8001402:	0018      	movs	r0, r3
 8001404:	f000 fc36 	bl	8001c74 <HAL_CAN_Init>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800140c:	f000 f9a4 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	20000038 	.word	0x20000038
 800141c:	40006400 	.word	0x40006400

08001420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_SPI1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_SPI1_Init+0x74>)
 800142c:	2282      	movs	r2, #130	@ 0x82
 800142e:	0052      	lsls	r2, r2, #1
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_SPI1_Init+0x74>)
 800143a:	22f0      	movs	r2, #240	@ 0xf0
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001448:	2201      	movs	r2, #1
 800144a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_SPI1_Init+0x74>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001456:	2208      	movs	r2, #8
 8001458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_SPI1_Init+0x74>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_SPI1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <MX_SPI1_Init+0x74>)
 8001480:	0018      	movs	r0, r3
 8001482:	f002 fbb5 	bl	8003bf0 <HAL_SPI_Init>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f965 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000060 	.word	0x20000060
 8001498:	40013000 	.word	0x40013000

0800149c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014a2:	4a0f      	ldr	r2, [pc, #60]	@ (80014e0 <MX_TIM14_Init+0x44>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014a8:	2263      	movs	r2, #99	@ 0x63
 80014aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 47999;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014b4:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <MX_TIM14_Init+0x48>)
 80014b6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <MX_TIM14_Init+0x40>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f003 fb42 	bl	8004b50 <HAL_TIM_Base_Init>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80014d0:	f000 f942 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80014d4:	46c0      	nop			@ (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	2000014c 	.word	0x2000014c
 80014e0:	40002000 	.word	0x40002000
 80014e4:	0000bb7f 	.word	0x0000bb7f

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_DMA_Init+0x38>)
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_DMA_Init+0x38>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_DMA_Init+0x38>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200a      	movs	r0, #10
 800150c:	f001 fad0 	bl	8002ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001510:	200a      	movs	r0, #10
 8001512:	f001 fae2 	bl	8002ada <HAL_NVIC_EnableIRQ>

}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	40021000 	.word	0x40021000

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	240c      	movs	r4, #12
 800152c:	193b      	adds	r3, r7, r4
 800152e:	0018      	movs	r0, r3
 8001530:	2314      	movs	r3, #20
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f003 fd49 	bl	8004fcc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_GPIO_Init+0xdc>)
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	03c9      	lsls	r1, r1, #15
 8001544:	430a      	orrs	r2, r1
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <MX_GPIO_Init+0xdc>)
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	03db      	lsls	r3, r3, #15
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_GPIO_Init+0xdc>)
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	0289      	lsls	r1, r1, #10
 8001560:	430a      	orrs	r2, r1
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001578:	2180      	movs	r1, #128	@ 0x80
 800157a:	02c9      	lsls	r1, r1, #11
 800157c:	430a      	orrs	r2, r1
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_GPIO_Init+0xdc>)
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	02db      	lsls	r3, r3, #11
 8001588:	4013      	ands	r3, r2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	0219      	lsls	r1, r3, #8
 8001592:	2390      	movs	r3, #144	@ 0x90
 8001594:	05db      	lsls	r3, r3, #23
 8001596:	2201      	movs	r2, #1
 8001598:	0018      	movs	r0, r3
 800159a:	f001 fe1e 	bl	80031da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STATUS_IND_Pin|WARN_IND_Pin, GPIO_PIN_RESET);
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_GPIO_Init+0xe0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	21c0      	movs	r1, #192	@ 0xc0
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 fe18 	bl	80031da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	0212      	lsls	r2, r2, #8
 80015b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2201      	movs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2203      	movs	r2, #3
 80015c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80015c4:	193a      	adds	r2, r7, r4
 80015c6:	2390      	movs	r3, #144	@ 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f001 fc7f 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_IND_Pin WARN_IND_Pin */
  GPIO_InitStruct.Pin = STATUS_IND_Pin|WARN_IND_Pin;
 80015d2:	0021      	movs	r1, r4
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	22c0      	movs	r2, #192	@ 0xc0
 80015d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2201      	movs	r2, #1
 80015de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <MX_GPIO_Init+0xe0>)
 80015f0:	0019      	movs	r1, r3
 80015f2:	0010      	movs	r0, r2
 80015f4:	f001 fc6c 	bl	8002ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b009      	add	sp, #36	@ 0x24
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400

08001608 <send_can_msg>:
        temperature_code = ~temperature_code;
    }
    return temperature_code * 0.03125f;
}

HAL_StatusTypeDef send_can_msg(const uint8_t *data, size_t len) {
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef header;
    header.IDE = CAN_ID_STD;
 8001612:	210c      	movs	r1, #12
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    header.StdId = TX_ID;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <send_can_msg+0x4c>)
 800161e:	601a      	str	r2, [r3, #0]
    header.RTR = CAN_RTR_DATA;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    header.TransmitGlobalTime = DISABLE;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	751a      	strb	r2, [r3, #20]
    header.DLC = len;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	611a      	str	r2, [r3, #16]

    uint32_t mailbox;

    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox);
 8001632:	2527      	movs	r5, #39	@ 0x27
 8001634:	197c      	adds	r4, r7, r5
 8001636:	2308      	movs	r3, #8
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	1879      	adds	r1, r7, r1
 800163e:	4806      	ldr	r0, [pc, #24]	@ (8001658 <send_can_msg+0x50>)
 8001640:	f000 fd4e 	bl	80020e0 <HAL_CAN_AddTxMessage>
 8001644:	0003      	movs	r3, r0
 8001646:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {

    }

    return status;
 8001648:	197b      	adds	r3, r7, r5
 800164a:	781b      	ldrb	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b00a      	add	sp, #40	@ 0x28
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	00000444 	.word	0x00000444
 8001658:	20000038 	.word	0x20000038

0800165c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b08f      	sub	sp, #60	@ 0x3c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef header;
    uint8_t data[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, data) != HAL_OK) {
 8001664:	230c      	movs	r3, #12
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2214      	movs	r2, #20
 800166a:	18ba      	adds	r2, r7, r2
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	2100      	movs	r1, #0
 8001670:	f000 fe08 	bl	8002284 <HAL_CAN_GetRxMessage>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d001      	beq.n	800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        Error_Handler();
 8001678:	f000 f86e 	bl	8001758 <Error_Handler>
    }

    uint8_t msg_type = data[0];
 800167c:	2137      	movs	r1, #55	@ 0x37
 800167e:	187b      	adds	r3, r7, r1
 8001680:	220c      	movs	r2, #12
 8001682:	18ba      	adds	r2, r7, r2
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	701a      	strb	r2, [r3, #0]
    switch(msg_type) {
 8001688:	187b      	adds	r3, r7, r1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b17      	cmp	r3, #23
 800168e:	d039      	beq.n	8001704 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8001690:	2b61      	cmp	r3, #97	@ 0x61
 8001692:	d13d      	bne.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
      case ENDPOINT_CALIBRATION: {
        if (header.DLC == 0) {
 8001694:	2314      	movs	r3, #20
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
          // Query
          uint16_t response[] = {pt.max_pressure, pt.min_pressure}; //TODO extended frame with voltages
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	2108      	movs	r1, #8
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	801a      	strh	r2, [r3, #0]
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80016ae:	885b      	ldrh	r3, [r3, #2]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	805a      	strh	r2, [r3, #2]
          send_can_msg((uint8_t*)response, 4);
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2104      	movs	r1, #4
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff ffa3 	bl	8001608 <send_can_msg>
          int16_t max = (int16_t)(data[1] | (data[2]<<8));
          int16_t min = (int16_t)(data[3] | (data[4]<<8));
          pt.max_pressure = max;
          pt.min_pressure = min;
        }
      } break;
 80016c2:	e025      	b.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
          int16_t max = (int16_t)(data[1] | (data[2]<<8));
 80016c4:	200c      	movs	r0, #12
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	b219      	sxth	r1, r3
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	789b      	ldrb	r3, [r3, #2]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	2434      	movs	r4, #52	@ 0x34
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	430a      	orrs	r2, r1
 80016da:	801a      	strh	r2, [r3, #0]
          int16_t min = (int16_t)(data[3] | (data[4]<<8));
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	b219      	sxth	r1, r3
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	2032      	movs	r0, #50	@ 0x32
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	430a      	orrs	r2, r1
 80016f0:	801a      	strh	r2, [r3, #0]
          pt.max_pressure = max;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80016f4:	193a      	adds	r2, r7, r4
 80016f6:	8812      	ldrh	r2, [r2, #0]
 80016f8:	801a      	strh	r2, [r3, #0]
          pt.min_pressure = min;
 80016fa:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80016fc:	183a      	adds	r2, r7, r0
 80016fe:	8812      	ldrh	r2, [r2, #0]
 8001700:	805a      	strh	r2, [r3, #2]
      } break;
 8001702:	e005      	b.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>

      case ENDPOINT_LED: {
        HAL_GPIO_TogglePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001706:	2140      	movs	r1, #64	@ 0x40
 8001708:	0018      	movs	r0, r3
 800170a:	f001 fd83 	bl	8003214 <HAL_GPIO_TogglePin>
      } break;
 800170e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b00f      	add	sp, #60	@ 0x3c
 8001716:	bd90      	pop	{r4, r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	48000400 	.word	0x48000400

08001720 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	adc_read_cplt = 1;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_SPI_TxRxCpltCallback+0x18>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	200001a5 	.word	0x200001a5

0800173c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  start_read_adc = 1;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
//        Error_Handler();
//    }
//    out[TS_ADC] = temperature_code_to_temperature(buf);

//    send_can_msg((uint8_t*)(&buf), 4);
}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	200001a4 	.word	0x200001a4

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(WARN_IND_GPIO_Port, WARN_IND_Pin);
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <Error_Handler+0x28>)
 8001762:	2180      	movs	r1, #128	@ 0x80
 8001764:	0018      	movs	r0, r3
 8001766:	f001 fd55 	bl	8003214 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <Error_Handler+0x28>)
 800176c:	2140      	movs	r1, #64	@ 0x40
 800176e:	0018      	movs	r0, r3
 8001770:	f001 fd50 	bl	8003214 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001774:	2064      	movs	r0, #100	@ 0x64
 8001776:	f000 fa59 	bl	8001c2c <HAL_Delay>
	  HAL_GPIO_TogglePin(WARN_IND_GPIO_Port, WARN_IND_Pin);
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	e7f0      	b.n	8001760 <Error_Handler+0x8>
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	48000400 	.word	0x48000400

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_MspInit+0x50>)
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_MspInit+0x50>)
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x50>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2201      	movs	r2, #1
 800179c:	4013      	ands	r3, r2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_MspInit+0x50>)
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_MspInit+0x50>)
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	0549      	lsls	r1, r1, #21
 80017ac:	430a      	orrs	r2, r1
 80017ae:	61da      	str	r2, [r3, #28]
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_MspInit+0x50>)
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	055b      	lsls	r3, r3, #21
 80017b8:	4013      	ands	r3, r2
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x54>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_MspInit+0x54>)
 80017c4:	2110      	movs	r1, #16
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000

080017dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b08b      	sub	sp, #44	@ 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	2414      	movs	r4, #20
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	2314      	movs	r3, #20
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f003 fbec 	bl	8004fcc <memset>
  if(hcan->Instance==CAN)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_CAN_MspInit+0xa4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d13b      	bne.n	8001876 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0489      	lsls	r1, r1, #18
 8001808:	430a      	orrs	r2, r1
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 800180e:	69da      	ldr	r2, [r3, #28]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	049b      	lsls	r3, r3, #18
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 8001820:	2180      	movs	r1, #128	@ 0x80
 8001822:	0289      	lsls	r1, r1, #10
 8001824:	430a      	orrs	r2, r1
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_CAN_MspInit+0xa8>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	029b      	lsls	r3, r3, #10
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	22c0      	movs	r2, #192	@ 0xc0
 800183a:	0152      	lsls	r2, r2, #5
 800183c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	0021      	movs	r1, r4
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2202      	movs	r2, #2
 8001844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2203      	movs	r2, #3
 8001850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2204      	movs	r2, #4
 8001856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	187a      	adds	r2, r7, r1
 800185a:	2390      	movs	r3, #144	@ 0x90
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f001 fb35 	bl	8002ed0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 1, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2101      	movs	r1, #1
 800186a:	201e      	movs	r0, #30
 800186c:	f001 f920 	bl	8002ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001870:	201e      	movs	r0, #30
 8001872:	f001 f932 	bl	8002ada <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b00b      	add	sp, #44	@ 0x2c
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	40006400 	.word	0x40006400
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08b      	sub	sp, #44	@ 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	2414      	movs	r4, #20
 8001892:	193b      	adds	r3, r7, r4
 8001894:	0018      	movs	r0, r3
 8001896:	2314      	movs	r3, #20
 8001898:	001a      	movs	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	f003 fb96 	bl	8004fcc <memset>
  if(hspi->Instance==SPI1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a48      	ldr	r2, [pc, #288]	@ (80019c8 <HAL_SPI_MspInit+0x140>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d000      	beq.n	80018ac <HAL_SPI_MspInit+0x24>
 80018aa:	e089      	b.n	80019c0 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ac:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	4b46      	ldr	r3, [pc, #280]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	0149      	lsls	r1, r1, #5
 80018b6:	430a      	orrs	r2, r1
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	4b44      	ldr	r3, [pc, #272]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	2380      	movs	r3, #128	@ 0x80
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	4b3f      	ldr	r3, [pc, #252]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	02c9      	lsls	r1, r1, #11
 80018d2:	430a      	orrs	r2, r1
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <HAL_SPI_MspInit+0x144>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	02db      	lsls	r3, r3, #11
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018e4:	0021      	movs	r1, r4
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2238      	movs	r2, #56	@ 0x38
 80018ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2202      	movs	r2, #2
 80018f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2203      	movs	r2, #3
 80018fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	187b      	adds	r3, r7, r1
 8001906:	4a32      	ldr	r2, [pc, #200]	@ (80019d0 <HAL_SPI_MspInit+0x148>)
 8001908:	0019      	movs	r1, r3
 800190a:	0010      	movs	r0, r2
 800190c:	f001 fae0 	bl	8002ed0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001910:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001912:	4a31      	ldr	r2, [pc, #196]	@ (80019d8 <HAL_SPI_MspInit+0x150>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001928:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	0052      	lsls	r2, r2, #1
 800192e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	00d2      	lsls	r2, r2, #3
 8001936:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001946:	0018      	movs	r0, r3
 8001948:	f001 f8e4 	bl	8002b14 <HAL_DMA_Init>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001950:	f7ff ff02 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a1f      	ldr	r2, [pc, #124]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 8001958:	659a      	str	r2, [r3, #88]	@ 0x58
 800195a:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <HAL_SPI_MspInit+0x14c>)
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001962:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_SPI_MspInit+0x158>)
 8001964:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001968:	2210      	movs	r2, #16
 800196a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	0052      	lsls	r2, r2, #1
 800197e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 8001996:	0018      	movs	r0, r3
 8001998:	f001 f8bc 	bl	8002b14 <HAL_DMA_Init>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d001      	beq.n	80019a4 <HAL_SPI_MspInit+0x11c>
    {
      Error_Handler();
 80019a0:	f7ff feda 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_SPI_MspInit+0x154>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2019      	movs	r0, #25
 80019b6:	f001 f87b 	bl	8002ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019ba:	2019      	movs	r0, #25
 80019bc:	f001 f88d 	bl	8002ada <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b00b      	add	sp, #44	@ 0x2c
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	40013000 	.word	0x40013000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	200000c4 	.word	0x200000c4
 80019d8:	4002001c 	.word	0x4002001c
 80019dc:	20000108 	.word	0x20000108
 80019e0:	40020030 	.word	0x40020030

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_TIM_Base_MspInit+0x48>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d115      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_TIM_Base_MspInit+0x4c>)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_TIM_Base_MspInit+0x4c>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0049      	lsls	r1, r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_TIM_Base_MspInit+0x4c>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2103      	movs	r1, #3
 8001a16:	2013      	movs	r0, #19
 8001a18:	f001 f84a 	bl	8002ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001a1c:	2013      	movs	r0, #19
 8001a1e:	f001 f85c 	bl	8002ada <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	40002000 	.word	0x40002000
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8ca 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f001 f943 	bl	8002cfa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 f93f 	bl	8002cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a7c:	46c0      	nop			@ (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	200000c4 	.word	0x200000c4
 8001a88:	20000108 	.word	0x20000108

08001a8c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <TIM14_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f003 f8f8 	bl	8004c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001a98:	46c0      	nop			@ (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	2000014c 	.word	0x2000014c

08001aa4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <SPI1_IRQHandler+0x14>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f002 fc04 	bl	80042b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	20000060 	.word	0x20000060

08001abc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <CEC_CAN_IRQHandler+0x14>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fd33 	bl	800252e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001ac8:	46c0      	nop			@ (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	20000038 	.word	0x20000038

08001ad4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae0:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae4:	f7ff fff6 	bl	8001ad4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001ae8:	4812      	ldr	r0, [pc, #72]	@ (8001b34 <LoopForever+0x6>)
    LDR R1, [R0]
 8001aea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001aec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <LoopForever+0xa>)
    CMP R1, R2
 8001af0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001af2:	d105      	bne.n	8001b00 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001af4:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001af6:	4912      	ldr	r1, [pc, #72]	@ (8001b40 <LoopForever+0x12>)
    STR R1, [R0]
 8001af8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001afa:	4812      	ldr	r0, [pc, #72]	@ (8001b44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001afc:	4912      	ldr	r1, [pc, #72]	@ (8001b48 <LoopForever+0x1a>)
    STR R1, [R0]
 8001afe:	6001      	str	r1, [r0, #0]

08001b00 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	4812      	ldr	r0, [pc, #72]	@ (8001b4c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001b02:	4913      	ldr	r1, [pc, #76]	@ (8001b50 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001b04:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <LoopForever+0x26>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001b18:	4c10      	ldr	r4, [pc, #64]	@ (8001b5c <LoopForever+0x2e>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b26:	f003 fa59 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fb23 	bl	8001174 <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   r0, =_estack
 8001b30:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001b34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001b38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001b3c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001b40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001b44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b48:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001b54:	080050f0 	.word	0x080050f0
  ldr r2, =_sbss
 8001b58:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001b5c:	200001ac 	.word	0x200001ac

08001b60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC1_IRQHandler>
	...

08001b64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_Init+0x24>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_Init+0x24>)
 8001b6e:	2110      	movs	r1, #16
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 f809 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7a:	f7ff fe03 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_InitTick+0x5c>)
 8001b96:	681c      	ldr	r4, [r3, #0]
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_InitTick+0x60>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	23fa      	movs	r3, #250	@ 0xfa
 8001ba0:	0098      	lsls	r0, r3, #2
 8001ba2:	f7fe fab1 	bl	8000108 <__udivsi3>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	0019      	movs	r1, r3
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7fe faac 	bl	8000108 <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 ffa1 	bl	8002afa <HAL_SYSTICK_Config>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e00f      	b.n	8001be0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d80b      	bhi.n	8001bde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 ff6e 	bl	8002ab0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_InitTick+0x64>)
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b003      	add	sp, #12
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	20000010 	.word	0x20000010
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	20000014 	.word	0x20000014

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	18d2      	adds	r2, r2, r3
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_IncTick+0x20>)
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	20000018 	.word	0x20000018
 8001c14:	200001a8 	.word	0x200001a8

08001c18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	@ (8001c28 <HAL_GetTick+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	200001a8 	.word	0x200001a8

08001c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	d005      	beq.n	8001c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <HAL_Delay+0x44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	f7ff ffe0 	bl	8001c18 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d8f7      	bhi.n	8001c54 <HAL_Delay+0x28>
  {
  }
}
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b004      	add	sp, #16
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	20000018 	.word	0x20000018

08001c74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0f0      	b.n	8001e68 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff fda1 	bl	80017dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001caa:	f7ff ffb5 	bl	8001c18 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cb2:	e013      	b.n	8001cdc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb4:	f7ff ffb0 	bl	8001c18 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	d90c      	bls.n	8001cdc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	0292      	lsls	r2, r2, #10
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0c5      	b.n	8001e68 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0e5      	beq.n	8001cb4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff ff8e 	bl	8001c18 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d00:	e013      	b.n	8001d2a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d02:	f7ff ff89 	bl	8001c18 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b0a      	cmp	r3, #10
 8001d0e:	d90c      	bls.n	8001d2a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	0292      	lsls	r2, r2, #10
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	2105      	movs	r1, #5
 8001d24:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e09e      	b.n	8001e68 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1e5      	bne.n	8001d02 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2180      	movs	r1, #128	@ 0x80
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e007      	b.n	8001d60 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e5b      	ldrb	r3, [r3, #25]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2140      	movs	r1, #64	@ 0x40
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e007      	b.n	8001d8a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2140      	movs	r1, #64	@ 0x40
 8001d86:	438a      	bics	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7e9b      	ldrb	r3, [r3, #26]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e007      	b.n	8001db4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2120      	movs	r1, #32
 8001db0:	438a      	bics	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7edb      	ldrb	r3, [r3, #27]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	438a      	bics	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2110      	movs	r1, #16
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2108      	movs	r1, #8
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e007      	b.n	8001e08 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2108      	movs	r1, #8
 8001e04:	438a      	bics	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7f5b      	ldrb	r3, [r3, #29]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d108      	bne.n	8001e22 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e007      	b.n	8001e32 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	438a      	bics	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0011      	movs	r1, r2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e80:	2013      	movs	r0, #19
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	2120      	movs	r1, #32
 8001e88:	5c52      	ldrb	r2, [r2, r1]
 8001e8a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	18bb      	adds	r3, r7, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_ConfigFilter+0x30>
 8001e96:	18bb      	adds	r3, r7, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d000      	beq.n	8001ea0 <HAL_CAN_ConfigFilter+0x30>
 8001e9e:	e0cd      	b.n	800203c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	58d3      	ldr	r3, [r2, r3]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	0011      	movs	r1, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	221f      	movs	r2, #31
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	2387      	movs	r3, #135	@ 0x87
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	58d3      	ldr	r3, [r2, r3]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	2387      	movs	r3, #135	@ 0x87
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d129      	bne.n	8001f3a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	2383      	movs	r3, #131	@ 0x83
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	58d3      	ldr	r3, [r2, r3]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	43d2      	mvns	r2, r2
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	2383      	movs	r3, #131	@ 0x83
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f10:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3248      	adds	r2, #72	@ 0x48
 8001f16:	00d2      	lsls	r2, r2, #3
 8001f18:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	3348      	adds	r3, #72	@ 0x48
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	18cb      	adds	r3, r1, r3
 8001f36:	3304      	adds	r3, #4
 8001f38:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d128      	bne.n	8001f94 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	2383      	movs	r3, #131	@ 0x83
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	58d2      	ldr	r2, [r2, r3]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	0011      	movs	r1, r2
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	2383      	movs	r3, #131	@ 0x83
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f6a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3248      	adds	r2, #72	@ 0x48
 8001f70:	00d2      	lsls	r2, r2, #3
 8001f72:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	3348      	adds	r3, #72	@ 0x48
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	18cb      	adds	r3, r1, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	2381      	movs	r3, #129	@ 0x81
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	58d3      	ldr	r3, [r2, r3]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	43d2      	mvns	r2, r2
 8001fa8:	401a      	ands	r2, r3
 8001faa:	0011      	movs	r1, r2
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	2381      	movs	r3, #129	@ 0x81
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	50d1      	str	r1, [r2, r3]
 8001fb4:	e00a      	b.n	8001fcc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	2381      	movs	r3, #129	@ 0x81
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	58d2      	ldr	r2, [r2, r3]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	2381      	movs	r3, #129	@ 0x81
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10c      	bne.n	8001fee <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	2385      	movs	r3, #133	@ 0x85
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	58d3      	ldr	r3, [r2, r3]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	43d2      	mvns	r2, r2
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	2385      	movs	r3, #133	@ 0x85
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	50d1      	str	r1, [r2, r3]
 8001fec:	e00a      	b.n	8002004 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	2385      	movs	r3, #133	@ 0x85
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	58d2      	ldr	r2, [r2, r3]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	2385      	movs	r3, #133	@ 0x85
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10a      	bne.n	8002022 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	2387      	movs	r3, #135	@ 0x87
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	58d2      	ldr	r2, [r2, r3]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	431a      	orrs	r2, r3
 8002018:	0011      	movs	r1, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	2387      	movs	r3, #135	@ 0x87
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	58d3      	ldr	r3, [r2, r3]
 800202a:	2201      	movs	r2, #1
 800202c:	4393      	bics	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e007      	b.n	800204c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	02d2      	lsls	r2, r2, #11
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
  }
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b006      	add	sp, #24
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	5c9b      	ldrb	r3, [r3, r2]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d12f      	bne.n	80020c8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	2102      	movs	r1, #2
 800206e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff fdca 	bl	8001c18 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002088:	e013      	b.n	80020b2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800208a:	f7ff fdc5 	bl	8001c18 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b0a      	cmp	r3, #10
 8002096:	d90c      	bls.n	80020b2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	0292      	lsls	r2, r2, #10
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	2105      	movs	r1, #5
 80020ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e012      	b.n	80020d8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1e5      	bne.n	800208a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e007      	b.n	80020d8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	0312      	lsls	r2, r2, #12
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
  }
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ee:	201f      	movs	r0, #31
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	2120      	movs	r1, #32
 80020f6:	5c52      	ldrb	r2, [r2, r1]
 80020f8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002102:	183b      	adds	r3, r7, r0
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d004      	beq.n	8002114 <HAL_CAN_AddTxMessage+0x34>
 800210a:	183b      	adds	r3, r7, r0
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d000      	beq.n	8002114 <HAL_CAN_AddTxMessage+0x34>
 8002112:	e0ab      	b.n	800226c <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	04db      	lsls	r3, r3, #19
 800211a:	4013      	ands	r3, r2
 800211c:	d10a      	bne.n	8002134 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	051b      	lsls	r3, r3, #20
 8002124:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002126:	d105      	bne.n	8002134 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002130:	d100      	bne.n	8002134 <HAL_CAN_AddTxMessage+0x54>
 8002132:	e092      	b.n	800225a <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	0e1b      	lsrs	r3, r3, #24
 8002138:	2203      	movs	r2, #3
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4311      	orrs	r1, r2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	3218      	adds	r2, #24
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	50d1      	str	r1, [r2, r3]
 8002168:	e00f      	b.n	800218a <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002174:	431a      	orrs	r2, r3
 8002176:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002180:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	3218      	adds	r2, #24
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3318      	adds	r3, #24
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	18cb      	adds	r3, r1, r3
 800219a:	3304      	adds	r3, #4
 800219c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	7d1b      	ldrb	r3, [r3, #20]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d112      	bne.n	80021cc <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3318      	adds	r3, #24
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	3304      	adds	r3, #4
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3318      	adds	r3, #24
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	18cb      	adds	r3, r1, r3
 80021c8:	3304      	adds	r3, #4
 80021ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3307      	adds	r3, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	061a      	lsls	r2, r3, #24
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3306      	adds	r3, #6
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3305      	adds	r3, #5
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	0019      	movs	r1, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	6979      	ldr	r1, [r7, #20]
 80021f8:	23c6      	movs	r3, #198	@ 0xc6
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	0109      	lsls	r1, r1, #4
 80021fe:	1841      	adds	r1, r0, r1
 8002200:	18cb      	adds	r3, r1, r3
 8002202:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3303      	adds	r3, #3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	061a      	lsls	r2, r3, #24
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3302      	adds	r3, #2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3301      	adds	r3, #1
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	0019      	movs	r1, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	6979      	ldr	r1, [r7, #20]
 800222e:	23c4      	movs	r3, #196	@ 0xc4
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	0109      	lsls	r1, r1, #4
 8002234:	1841      	adds	r1, r0, r1
 8002236:	18cb      	adds	r3, r1, r3
 8002238:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	3218      	adds	r2, #24
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	58d2      	ldr	r2, [r2, r3]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	4311      	orrs	r1, r2
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	3218      	adds	r2, #24
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e010      	b.n	800227c <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	0392      	lsls	r2, r2, #14
 8002262:	431a      	orrs	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	2280      	movs	r2, #128	@ 0x80
 8002272:	02d2      	lsls	r2, r2, #11
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
  }
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b008      	add	sp, #32
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002292:	2017      	movs	r0, #23
 8002294:	183b      	adds	r3, r7, r0
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	2120      	movs	r1, #32
 800229a:	5c52      	ldrb	r2, [r2, r1]
 800229c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800229e:	0002      	movs	r2, r0
 80022a0:	18bb      	adds	r3, r7, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d004      	beq.n	80022b2 <HAL_CAN_GetRxMessage+0x2e>
 80022a8:	18bb      	adds	r3, r7, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d000      	beq.n	80022b2 <HAL_CAN_GetRxMessage+0x2e>
 80022b0:	e107      	b.n	80024c2 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10e      	bne.n	80022d6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	d117      	bne.n	80022f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	0392      	lsls	r2, r2, #14
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0fd      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2203      	movs	r2, #3
 80022de:	4013      	ands	r3, r2
 80022e0:	d108      	bne.n	80022f4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	2280      	movs	r2, #128	@ 0x80
 80022e8:	0392      	lsls	r2, r2, #14
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0ee      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	321b      	adds	r2, #27
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	58d3      	ldr	r3, [r2, r3]
 8002300:	2204      	movs	r2, #4
 8002302:	401a      	ands	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	321b      	adds	r2, #27
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	58d3      	ldr	r3, [r2, r3]
 800231c:	0d5b      	lsrs	r3, r3, #21
 800231e:	055b      	lsls	r3, r3, #21
 8002320:	0d5a      	lsrs	r2, r3, #21
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00a      	b.n	800233e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	321b      	adds	r2, #27
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	58d3      	ldr	r3, [r2, r3]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	321b      	adds	r2, #27
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	58d3      	ldr	r3, [r2, r3]
 800234a:	2202      	movs	r2, #2
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	331b      	adds	r3, #27
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	18d3      	adds	r3, r2, r3
 800235e:	3304      	adds	r3, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2208      	movs	r2, #8
 8002364:	4013      	ands	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2208      	movs	r2, #8
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	e00b      	b.n	8002388 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	331b      	adds	r3, #27
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	18d3      	adds	r3, r2, r3
 800237c:	3304      	adds	r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	220f      	movs	r2, #15
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	18d3      	adds	r3, r2, r3
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	22ff      	movs	r2, #255	@ 0xff
 800239c:	401a      	ands	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	331b      	adds	r3, #27
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	3304      	adds	r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	0c1a      	lsrs	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	23dc      	movs	r3, #220	@ 0xdc
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	188a      	adds	r2, r1, r2
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	23dc      	movs	r3, #220	@ 0xdc
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	188a      	adds	r2, r1, r2
 80023e2:	18d3      	adds	r3, r2, r3
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0a1a      	lsrs	r2, r3, #8
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	23dc      	movs	r3, #220	@ 0xdc
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	188a      	adds	r2, r1, r2
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0c1a      	lsrs	r2, r3, #16
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3302      	adds	r3, #2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	23dc      	movs	r3, #220	@ 0xdc
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	188a      	adds	r2, r1, r2
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e1a      	lsrs	r2, r3, #24
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3303      	adds	r3, #3
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	23de      	movs	r3, #222	@ 0xde
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	188a      	adds	r2, r1, r2
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3304      	adds	r3, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	23de      	movs	r3, #222	@ 0xde
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	188a      	adds	r2, r1, r2
 8002450:	18d3      	adds	r3, r2, r3
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0a1a      	lsrs	r2, r3, #8
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3305      	adds	r3, #5
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	23de      	movs	r3, #222	@ 0xde
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	188a      	adds	r2, r1, r2
 800246c:	18d3      	adds	r3, r2, r3
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0c1a      	lsrs	r2, r3, #16
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3306      	adds	r3, #6
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	23de      	movs	r3, #222	@ 0xde
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	188a      	adds	r2, r1, r2
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e1a      	lsrs	r2, r3, #24
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3307      	adds	r3, #7
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2120      	movs	r1, #32
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e007      	b.n	80024be <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2120      	movs	r1, #32
 80024ba:	430a      	orrs	r2, r1
 80024bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e007      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	02d2      	lsls	r2, r2, #11
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
  }
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b006      	add	sp, #24
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e4:	200f      	movs	r0, #15
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	2120      	movs	r1, #32
 80024ec:	5c52      	ldrb	r2, [r2, r1]
 80024ee:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f0:	0002      	movs	r2, r0
 80024f2:	18bb      	adds	r3, r7, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_ActivateNotification+0x28>
 80024fa:	18bb      	adds	r3, r7, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d109      	bne.n	8002516 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6959      	ldr	r1, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e007      	b.n	8002526 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	02d2      	lsls	r2, r2, #11
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
  }
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08a      	sub	sp, #40	@ 0x28
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_CAN_IRQHandler+0x46>
 8002572:	e084      	b.n	800267e <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d024      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2202      	movs	r2, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f981 	bl	8002896 <HAL_CAN_TxMailbox0CompleteCallback>
 8002594:	e017      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2204      	movs	r2, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d005      	beq.n	80025aa <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	4313      	orrs	r3, r2
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e00d      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2208      	movs	r2, #8
 80025ae:	4013      	ands	r3, r2
 80025b0:	d005      	beq.n	80025be <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	2280      	movs	r2, #128	@ 0x80
 80025b6:	0152      	lsls	r2, r2, #5
 80025b8:	4313      	orrs	r3, r2
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80025bc:	e003      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f980 	bl	80028c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d028      	beq.n	8002622 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	0052      	lsls	r2, r2, #1
 80025d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f95d 	bl	80028a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80025ec:	e019      	b.n	8002622 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4013      	ands	r3, r2
 80025f6:	d005      	beq.n	8002604 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	0192      	lsls	r2, r2, #6
 80025fe:	4313      	orrs	r3, r2
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
 8002602:	e00e      	b.n	8002622 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4013      	ands	r3, r2
 800260c:	d005      	beq.n	800261a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	2280      	movs	r2, #128	@ 0x80
 8002612:	01d2      	lsls	r2, r2, #7
 8002614:	4313      	orrs	r3, r2
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
 8002618:	e003      	b.n	8002622 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f95a 	bl	80028d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	025b      	lsls	r3, r3, #9
 8002628:	4013      	ands	r3, r2
 800262a:	d028      	beq.n	800267e <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	0252      	lsls	r2, r2, #9
 8002634:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 f937 	bl	80028b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002648:	e019      	b.n	800267e <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	02db      	lsls	r3, r3, #11
 8002650:	4013      	ands	r3, r2
 8002652:	d005      	beq.n	8002660 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	2280      	movs	r2, #128	@ 0x80
 8002658:	0212      	lsls	r2, r2, #8
 800265a:	4313      	orrs	r3, r2
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
 800265e:	e00e      	b.n	800267e <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	4013      	ands	r3, r2
 8002668:	d005      	beq.n	8002676 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2280      	movs	r2, #128	@ 0x80
 800266e:	0252      	lsls	r2, r2, #9
 8002670:	4313      	orrs	r3, r2
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	e003      	b.n	800267e <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f934 	bl	80028e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	2208      	movs	r2, #8
 8002682:	4013      	ands	r3, r2
 8002684:	d00c      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2210      	movs	r2, #16
 800268a:	4013      	ands	r3, r2
 800268c:	d008      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	2280      	movs	r2, #128	@ 0x80
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4313      	orrs	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d00b      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2208      	movs	r2, #8
 80026ac:	4013      	ands	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2208      	movs	r2, #8
 80026b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 f91b 	bl	80028f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7fe ffc0 	bl	800165c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00c      	beq.n	80026fe <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2210      	movs	r2, #16
 80026e8:	4013      	ands	r3, r2
 80026ea:	d008      	beq.n	80026fe <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	00d2      	lsls	r2, r2, #3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2210      	movs	r2, #16
 80026fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2220      	movs	r2, #32
 8002702:	4013      	ands	r3, r2
 8002704:	d00b      	beq.n	800271e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2208      	movs	r2, #8
 800270a:	4013      	ands	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f8fc 	bl	8002916 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2203      	movs	r2, #3
 800272e:	4013      	ands	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f8e6 	bl	8002906 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	2380      	movs	r3, #128	@ 0x80
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	4013      	ands	r3, r2
 8002742:	d00b      	beq.n	800275c <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2210      	movs	r2, #16
 8002748:	4013      	ands	r3, r2
 800274a:	d007      	beq.n	800275c <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f8e5 	bl	8002926 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	025b      	lsls	r3, r3, #9
 8002762:	4013      	ands	r3, r2
 8002764:	d00b      	beq.n	800277e <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2208      	movs	r2, #8
 800276a:	4013      	ands	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2208      	movs	r2, #8
 8002774:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f8dc 	bl	8002936 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_CAN_IRQHandler+0x25c>
 8002788:	e074      	b.n	8002874 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2204      	movs	r2, #4
 800278e:	4013      	ands	r3, r2
 8002790:	d100      	bne.n	8002794 <HAL_CAN_IRQHandler+0x266>
 8002792:	e06b      	b.n	800286c <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027a4:	d003      	beq.n	80027ae <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	2201      	movs	r2, #1
 80027aa:	4313      	orrs	r3, r2
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ae:	6a3a      	ldr	r2, [r7, #32]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027be:	d003      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	2202      	movs	r2, #2
 80027c4:	4313      	orrs	r3, r2
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c8:	6a3a      	ldr	r2, [r7, #32]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4013      	ands	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2204      	movs	r2, #4
 80027d6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d8:	d003      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2204      	movs	r2, #4
 80027de:	4313      	orrs	r3, r2
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d03f      	beq.n	800286c <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2270      	movs	r2, #112	@ 0x70
 80027f0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f2:	d03b      	beq.n	800286c <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2270      	movs	r2, #112	@ 0x70
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b60      	cmp	r3, #96	@ 0x60
 80027fc:	d027      	beq.n	800284e <HAL_CAN_IRQHandler+0x320>
 80027fe:	d82c      	bhi.n	800285a <HAL_CAN_IRQHandler+0x32c>
 8002800:	2b50      	cmp	r3, #80	@ 0x50
 8002802:	d01f      	beq.n	8002844 <HAL_CAN_IRQHandler+0x316>
 8002804:	d829      	bhi.n	800285a <HAL_CAN_IRQHandler+0x32c>
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	d017      	beq.n	800283a <HAL_CAN_IRQHandler+0x30c>
 800280a:	d826      	bhi.n	800285a <HAL_CAN_IRQHandler+0x32c>
 800280c:	2b30      	cmp	r3, #48	@ 0x30
 800280e:	d00f      	beq.n	8002830 <HAL_CAN_IRQHandler+0x302>
 8002810:	d823      	bhi.n	800285a <HAL_CAN_IRQHandler+0x32c>
 8002812:	2b10      	cmp	r3, #16
 8002814:	d002      	beq.n	800281c <HAL_CAN_IRQHandler+0x2ee>
 8002816:	2b20      	cmp	r3, #32
 8002818:	d005      	beq.n	8002826 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800281a:	e01e      	b.n	800285a <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	2208      	movs	r2, #8
 8002820:	4313      	orrs	r3, r2
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002824:	e01a      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	2210      	movs	r2, #16
 800282a:	4313      	orrs	r3, r2
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800282e:	e015      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2220      	movs	r2, #32
 8002834:	4313      	orrs	r3, r2
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002838:	e010      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	2240      	movs	r2, #64	@ 0x40
 800283e:	4313      	orrs	r3, r2
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002842:	e00b      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	4313      	orrs	r3, r2
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800284c:	e006      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	2280      	movs	r2, #128	@ 0x80
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	4313      	orrs	r3, r2
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002858:	e000      	b.n	800285c <HAL_CAN_IRQHandler+0x32e>
            break;
 800285a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2170      	movs	r1, #112	@ 0x70
 8002868:	438a      	bics	r2, r1
 800286a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2204      	movs	r2, #4
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f85c 	bl	8002946 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b00a      	add	sp, #40	@ 0x28
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b002      	add	sp, #8
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	0002      	movs	r2, r0
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b7f      	cmp	r3, #127	@ 0x7f
 800296a:	d809      	bhi.n	8002980 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	001a      	movs	r2, r3
 8002972:	231f      	movs	r3, #31
 8002974:	401a      	ands	r2, r3
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <__NVIC_EnableIRQ+0x30>)
 8002978:	2101      	movs	r1, #1
 800297a:	4091      	lsls	r1, r2
 800297c:	000a      	movs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
  }
}
 8002980:	46c0      	nop			@ (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	0002      	movs	r2, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b7f      	cmp	r3, #127	@ 0x7f
 80029a0:	d828      	bhi.n	80029f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a60 <__NVIC_SetPriority+0xd4>)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	33c0      	adds	r3, #192	@ 0xc0
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	589b      	ldr	r3, [r3, r2]
 80029b2:	1dfa      	adds	r2, r7, #7
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	0011      	movs	r1, r2
 80029b8:	2203      	movs	r2, #3
 80029ba:	400a      	ands	r2, r1
 80029bc:	00d2      	lsls	r2, r2, #3
 80029be:	21ff      	movs	r1, #255	@ 0xff
 80029c0:	4091      	lsls	r1, r2
 80029c2:	000a      	movs	r2, r1
 80029c4:	43d2      	mvns	r2, r2
 80029c6:	401a      	ands	r2, r3
 80029c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	22ff      	movs	r2, #255	@ 0xff
 80029d0:	401a      	ands	r2, r3
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	0018      	movs	r0, r3
 80029d8:	2303      	movs	r3, #3
 80029da:	4003      	ands	r3, r0
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e0:	481f      	ldr	r0, [pc, #124]	@ (8002a60 <__NVIC_SetPriority+0xd4>)
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	430a      	orrs	r2, r1
 80029ec:	33c0      	adds	r3, #192	@ 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029f2:	e031      	b.n	8002a58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <__NVIC_SetPriority+0xd8>)
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	0019      	movs	r1, r3
 80029fc:	230f      	movs	r3, #15
 80029fe:	400b      	ands	r3, r1
 8002a00:	3b08      	subs	r3, #8
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3306      	adds	r3, #6
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	18d3      	adds	r3, r2, r3
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1dfa      	adds	r2, r7, #7
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	0011      	movs	r1, r2
 8002a14:	2203      	movs	r2, #3
 8002a16:	400a      	ands	r2, r1
 8002a18:	00d2      	lsls	r2, r2, #3
 8002a1a:	21ff      	movs	r1, #255	@ 0xff
 8002a1c:	4091      	lsls	r1, r2
 8002a1e:	000a      	movs	r2, r1
 8002a20:	43d2      	mvns	r2, r2
 8002a22:	401a      	ands	r2, r3
 8002a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	22ff      	movs	r2, #255	@ 0xff
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	0018      	movs	r0, r3
 8002a34:	2303      	movs	r3, #3
 8002a36:	4003      	ands	r3, r0
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a3c:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <__NVIC_SetPriority+0xd8>)
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	001c      	movs	r4, r3
 8002a44:	230f      	movs	r3, #15
 8002a46:	4023      	ands	r3, r4
 8002a48:	3b08      	subs	r3, #8
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	3306      	adds	r3, #6
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	18c3      	adds	r3, r0, r3
 8002a54:	3304      	adds	r3, #4
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b003      	add	sp, #12
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1e5a      	subs	r2, r3, #1
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	045b      	lsls	r3, r3, #17
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d301      	bcc.n	8002a80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e010      	b.n	8002aa2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <SysTick_Config+0x44>)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	3a01      	subs	r2, #1
 8002a86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a88:	2301      	movs	r3, #1
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7ff ff7c 	bl	800298c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <SysTick_Config+0x44>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9a:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <SysTick_Config+0x44>)
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b002      	add	sp, #8
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	210f      	movs	r1, #15
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	1c02      	adds	r2, r0, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	0011      	movs	r1, r2
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff ff5d 	bl	800298c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b004      	add	sp, #16
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff ff33 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b002      	add	sp, #8
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff ffaf 	bl	8002a68 <SysTick_Config>
 8002b0a:	0003      	movs	r3, r0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e036      	b.n	8002b98 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2221      	movs	r2, #33	@ 0x21
 8002b2e:	2102      	movs	r1, #2
 8002b30:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_DMA_Init+0x8c>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f98c 	bl	8002e98 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2221      	movs	r2, #33	@ 0x21
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	ffffc00f 	.word	0xffffc00f

08002ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2317      	movs	r3, #23
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_DMA_Start_IT+0x24>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e04f      	b.n	8002c68 <HAL_DMA_Start_IT+0xc4>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2221      	movs	r2, #33	@ 0x21
 8002bd4:	5c9b      	ldrb	r3, [r3, r2]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d13a      	bne.n	8002c52 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	@ 0x21
 8002be0:	2102      	movs	r1, #2
 8002be2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f91c 	bl	8002e3e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	210e      	movs	r1, #14
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e00f      	b.n	8002c40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	210a      	movs	r1, #10
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e007      	b.n	8002c62 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	2100      	movs	r1, #0
 8002c58:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c5a:	2317      	movs	r3, #23
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002c62:	2317      	movs	r3, #23
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	781b      	ldrb	r3, [r3, #0]
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b006      	add	sp, #24
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	210f      	movs	r1, #15
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2221      	movs	r2, #33	@ 0x21
 8002c84:	5c9b      	ldrb	r3, [r3, r2]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d006      	beq.n	8002c9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e028      	b.n	8002cec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	210e      	movs	r1, #14
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	438a      	bics	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4091      	lsls	r1, r2
 8002cc6:	000a      	movs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2221      	movs	r2, #33	@ 0x21
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	0010      	movs	r0, r2
 8002cea:	4798      	blx	r3
    }
  }
  return status;
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b004      	add	sp, #16
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2204      	movs	r2, #4
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	0013      	movs	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d024      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x72>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2204      	movs	r2, #4
 8002d26:	4013      	ands	r3, r2
 8002d28:	d020      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2220      	movs	r2, #32
 8002d32:	4013      	ands	r3, r2
 8002d34:	d107      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2104      	movs	r1, #4
 8002d42:	438a      	bics	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4e:	2104      	movs	r1, #4
 8002d50:	4091      	lsls	r1, r2
 8002d52:	000a      	movs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d100      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x66>
 8002d5e:	e06a      	b.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	0010      	movs	r0, r2
 8002d68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d6a:	e064      	b.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	2202      	movs	r2, #2
 8002d72:	409a      	lsls	r2, r3
 8002d74:	0013      	movs	r3, r2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d02b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xda>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	d027      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d10b      	bne.n	8002da8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	210a      	movs	r1, #10
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2221      	movs	r2, #33	@ 0x21
 8002da4:	2101      	movs	r1, #1
 8002da6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	2102      	movs	r1, #2
 8002db2:	4091      	lsls	r1, r2
 8002db4:	000a      	movs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	0010      	movs	r0, r2
 8002dd0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002dd2:	e030      	b.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	2208      	movs	r2, #8
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	d028      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2208      	movs	r2, #8
 8002de8:	4013      	ands	r3, r2
 8002dea:	d024      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	210e      	movs	r1, #14
 8002df8:	438a      	bics	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	2101      	movs	r1, #1
 8002e06:	4091      	lsls	r1, r2
 8002e08:	000a      	movs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2221      	movs	r2, #33	@ 0x21
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	0010      	movs	r0, r2
 8002e32:	4798      	blx	r3
    }
  }
}
 8002e34:	e7ff      	b.n	8002e36 <HAL_DMA_IRQHandler+0x13c>
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b004      	add	sp, #16
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	2101      	movs	r1, #1
 8002e56:	4091      	lsls	r1, r2
 8002e58:	000a      	movs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d108      	bne.n	8002e7e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e7c:	e007      	b.n	8002e8e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a08      	ldr	r2, [pc, #32]	@ (8002ec8 <DMA_CalcBaseAndBitshift+0x30>)
 8002ea6:	4694      	mov	ip, r2
 8002ea8:	4463      	add	r3, ip
 8002eaa:	2114      	movs	r1, #20
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fd f92b 	bl	8000108 <__udivsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	009a      	lsls	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a03      	ldr	r2, [pc, #12]	@ (8002ecc <DMA_CalcBaseAndBitshift+0x34>)
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	bffdfff8 	.word	0xbffdfff8
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	e149      	b.n	8003174 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4091      	lsls	r1, r2
 8002eea:	000a      	movs	r2, r1
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_GPIO_Init+0x28>
 8002ef6:	e13a      	b.n	800316e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d005      	beq.n	8002f10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d130      	bne.n	8002f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	43da      	mvns	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	409a      	lsls	r2, r3
 8002f32:	0013      	movs	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f46:	2201      	movs	r2, #1
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d017      	beq.n	8002fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d123      	bne.n	8003002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3208      	adds	r2, #8
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	58d3      	ldr	r3, [r2, r3]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2207      	movs	r2, #7
 8002fcc:	4013      	ands	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2107      	movs	r1, #7
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	6939      	ldr	r1, [r7, #16]
 8003000:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	43da      	mvns	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2203      	movs	r2, #3
 8003020:	401a      	ands	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	23c0      	movs	r3, #192	@ 0xc0
 800303c:	029b      	lsls	r3, r3, #10
 800303e:	4013      	ands	r3, r2
 8003040:	d100      	bne.n	8003044 <HAL_GPIO_Init+0x174>
 8003042:	e094      	b.n	800316e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003044:	4b51      	ldr	r3, [pc, #324]	@ (800318c <HAL_GPIO_Init+0x2bc>)
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	4b50      	ldr	r3, [pc, #320]	@ (800318c <HAL_GPIO_Init+0x2bc>)
 800304a:	2101      	movs	r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	619a      	str	r2, [r3, #24]
 8003050:	4b4e      	ldr	r3, [pc, #312]	@ (800318c <HAL_GPIO_Init+0x2bc>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800305c:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_GPIO_Init+0x2c0>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	589b      	ldr	r3, [r3, r2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	409a      	lsls	r2, r3
 8003076:	0013      	movs	r3, r2
 8003078:	43da      	mvns	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	2390      	movs	r3, #144	@ 0x90
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	429a      	cmp	r2, r3
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_Init+0x1d6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a41      	ldr	r2, [pc, #260]	@ (8003194 <HAL_GPIO_Init+0x2c4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_Init+0x1d2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a40      	ldr	r2, [pc, #256]	@ (8003198 <HAL_GPIO_Init+0x2c8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_Init+0x1ce>
 800309a:	2302      	movs	r3, #2
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x1d8>
 800309e:	2305      	movs	r3, #5
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x1d8>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x1d8>
 80030a6:	2300      	movs	r3, #0
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	2103      	movs	r1, #3
 80030ac:	400a      	ands	r2, r1
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	@ (8003190 <HAL_GPIO_Init+0x2c0>)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b35      	ldr	r3, [pc, #212]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	035b      	lsls	r3, r3, #13
 80030de:	4013      	ands	r3, r2
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030ea:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030f0:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	039b      	lsls	r3, r3, #14
 8003108:	4013      	ands	r3, r2
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43da      	mvns	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	029b      	lsls	r3, r3, #10
 8003132:	4013      	ands	r3, r2
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800313e:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003144:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43da      	mvns	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	4013      	ands	r3, r2
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <HAL_GPIO_Init+0x2cc>)
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3301      	adds	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	40da      	lsrs	r2, r3
 800317c:	1e13      	subs	r3, r2, #0
 800317e:	d000      	beq.n	8003182 <HAL_GPIO_Init+0x2b2>
 8003180:	e6ae      	b.n	8002ee0 <HAL_GPIO_Init+0x10>
  } 
}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	46c0      	nop			@ (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b006      	add	sp, #24
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	40010000 	.word	0x40010000
 8003194:	48000400 	.word	0x48000400
 8003198:	48000800 	.word	0x48000800
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	000a      	movs	r2, r1
 80031aa:	1cbb      	adds	r3, r7, #2
 80031ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	1cba      	adds	r2, r7, #2
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	4013      	ands	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031ba:	230f      	movs	r3, #15
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e003      	b.n	80031cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	781b      	ldrb	r3, [r3, #0]
  }
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	0008      	movs	r0, r1
 80031e4:	0011      	movs	r1, r2
 80031e6:	1cbb      	adds	r3, r7, #2
 80031e8:	1c02      	adds	r2, r0, #0
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	1c7b      	adds	r3, r7, #1
 80031ee:	1c0a      	adds	r2, r1, #0
 80031f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f2:	1c7b      	adds	r3, r7, #1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	1cbb      	adds	r3, r7, #2
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003202:	e003      	b.n	800320c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003204:	1cbb      	adds	r3, r7, #2
 8003206:	881a      	ldrh	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800320c:	46c0      	nop			@ (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	000a      	movs	r2, r1
 800321e:	1cbb      	adds	r3, r7, #2
 8003220:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003228:	1cbb      	adds	r3, r7, #2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	1cb9      	adds	r1, r7, #2
 8003238:	8809      	ldrh	r1, [r1, #0]
 800323a:	400b      	ands	r3, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f000 fb76 	bl	800394c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d100      	bne.n	800326c <HAL_RCC_OscConfig+0x20>
 800326a:	e08e      	b.n	800338a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800326c:	4bc5      	ldr	r3, [pc, #788]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	220c      	movs	r2, #12
 8003272:	4013      	ands	r3, r2
 8003274:	2b04      	cmp	r3, #4
 8003276:	d00e      	beq.n	8003296 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003278:	4bc2      	ldr	r3, [pc, #776]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	220c      	movs	r2, #12
 800327e:	4013      	ands	r3, r2
 8003280:	2b08      	cmp	r3, #8
 8003282:	d117      	bne.n	80032b4 <HAL_RCC_OscConfig+0x68>
 8003284:	4bbf      	ldr	r3, [pc, #764]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	23c0      	movs	r3, #192	@ 0xc0
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	401a      	ands	r2, r3
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	025b      	lsls	r3, r3, #9
 8003292:	429a      	cmp	r2, r3
 8003294:	d10e      	bne.n	80032b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4bbb      	ldr	r3, [pc, #748]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	4013      	ands	r3, r2
 80032a0:	d100      	bne.n	80032a4 <HAL_RCC_OscConfig+0x58>
 80032a2:	e071      	b.n	8003388 <HAL_RCC_OscConfig+0x13c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d000      	beq.n	80032ae <HAL_RCC_OscConfig+0x62>
 80032ac:	e06c      	b.n	8003388 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f000 fb4c 	bl	800394c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_OscConfig+0x80>
 80032bc:	4bb1      	ldr	r3, [pc, #708]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4bb0      	ldr	r3, [pc, #704]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032c2:	2180      	movs	r1, #128	@ 0x80
 80032c4:	0249      	lsls	r1, r1, #9
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e02f      	b.n	800332c <HAL_RCC_OscConfig+0xe0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0xa2>
 80032d4:	4bab      	ldr	r3, [pc, #684]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4baa      	ldr	r3, [pc, #680]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032da:	49ab      	ldr	r1, [pc, #684]	@ (8003588 <HAL_RCC_OscConfig+0x33c>)
 80032dc:	400a      	ands	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	4ba8      	ldr	r3, [pc, #672]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032e6:	49a9      	ldr	r1, [pc, #676]	@ (800358c <HAL_RCC_OscConfig+0x340>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e01e      	b.n	800332c <HAL_RCC_OscConfig+0xe0>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d10e      	bne.n	8003314 <HAL_RCC_OscConfig+0xc8>
 80032f6:	4ba3      	ldr	r3, [pc, #652]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4ba2      	ldr	r3, [pc, #648]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	02c9      	lsls	r1, r1, #11
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4b9f      	ldr	r3, [pc, #636]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b9e      	ldr	r3, [pc, #632]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	0249      	lsls	r1, r1, #9
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0xe0>
 8003314:	4b9b      	ldr	r3, [pc, #620]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b9a      	ldr	r3, [pc, #616]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800331a:	499b      	ldr	r1, [pc, #620]	@ (8003588 <HAL_RCC_OscConfig+0x33c>)
 800331c:	400a      	ands	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	4b98      	ldr	r3, [pc, #608]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b97      	ldr	r3, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003326:	4999      	ldr	r1, [pc, #612]	@ (800358c <HAL_RCC_OscConfig+0x340>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d014      	beq.n	800335e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fe fc70 	bl	8001c18 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333e:	f7fe fc6b 	bl	8001c18 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	@ 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e2fd      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003350:	4b8c      	ldr	r3, [pc, #560]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	4013      	ands	r3, r2
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0xf2>
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fc5b 	bl	8001c18 <HAL_GetTick>
 8003362:	0003      	movs	r3, r0
 8003364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fc56 	bl	8001c18 <HAL_GetTick>
 800336c:	0002      	movs	r2, r0
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2e8      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b82      	ldr	r3, [pc, #520]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	029b      	lsls	r3, r3, #10
 8003382:	4013      	ands	r3, r2
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x11c>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <HAL_RCC_OscConfig+0x14a>
 8003394:	e06c      	b.n	8003470 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003396:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	220c      	movs	r2, #12
 800339c:	4013      	ands	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033a0:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	220c      	movs	r2, #12
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d11f      	bne.n	80033ec <HAL_RCC_OscConfig+0x1a0>
 80033ac:	4b75      	ldr	r3, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	23c0      	movs	r3, #192	@ 0xc0
 80033b2:	025b      	lsls	r3, r3, #9
 80033b4:	401a      	ands	r2, r3
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b71      	ldr	r3, [pc, #452]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x188>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e2bb      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	22f8      	movs	r2, #248	@ 0xf8
 80033da:	4393      	bics	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00da      	lsls	r2, r3, #3
 80033e4:	4b67      	ldr	r3, [pc, #412]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e041      	b.n	8003470 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d024      	beq.n	800343e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b62      	ldr	r3, [pc, #392]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fc0a 	bl	8001c18 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fc05 	bl	8001c18 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e297      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b59      	ldr	r3, [pc, #356]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d0f1      	beq.n	800340a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	22f8      	movs	r2, #248	@ 0xf8
 800342c:	4393      	bics	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00da      	lsls	r2, r3, #3
 8003436:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e018      	b.n	8003470 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b51      	ldr	r3, [pc, #324]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b50      	ldr	r3, [pc, #320]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003444:	2101      	movs	r1, #1
 8003446:	438a      	bics	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe fbe5 	bl	8001c18 <HAL_GetTick>
 800344e:	0003      	movs	r3, r0
 8003450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe fbe0 	bl	8001c18 <HAL_GetTick>
 8003458:	0002      	movs	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e272      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d1f1      	bne.n	8003454 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2208      	movs	r2, #8
 8003476:	4013      	ands	r3, r2
 8003478:	d036      	beq.n	80034e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b40      	ldr	r3, [pc, #256]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003486:	4b3f      	ldr	r3, [pc, #252]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe fbc3 	bl	8001c18 <HAL_GetTick>
 8003492:	0003      	movs	r3, r0
 8003494:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7fe fbbe 	bl	8001c18 <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e250      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	2202      	movs	r2, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	d0f1      	beq.n	8003498 <HAL_RCC_OscConfig+0x24c>
 80034b4:	e018      	b.n	80034e8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b33      	ldr	r3, [pc, #204]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80034b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ba:	4b32      	ldr	r3, [pc, #200]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fba9 	bl	8001c18 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fe fba4 	bl	8001c18 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e236      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034de:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d1f1      	bne.n	80034cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2204      	movs	r2, #4
 80034ee:	4013      	ands	r3, r2
 80034f0:	d100      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2a8>
 80034f2:	e0b5      	b.n	8003660 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f4:	201f      	movs	r0, #31
 80034f6:	183b      	adds	r3, r7, r0
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fc:	4b21      	ldr	r3, [pc, #132]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	2380      	movs	r3, #128	@ 0x80
 8003502:	055b      	lsls	r3, r3, #21
 8003504:	4013      	ands	r3, r2
 8003506:	d110      	bne.n	800352a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b1e      	ldr	r3, [pc, #120]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	0549      	lsls	r1, r1, #21
 8003512:	430a      	orrs	r2, r1
 8003514:	61da      	str	r2, [r3, #28]
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	055b      	lsls	r3, r3, #21
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003524:	183b      	adds	r3, r7, r0
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_RCC_OscConfig+0x344>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d11a      	bne.n	800356c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <HAL_RCC_OscConfig+0x344>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_RCC_OscConfig+0x344>)
 800353c:	2180      	movs	r1, #128	@ 0x80
 800353e:	0049      	lsls	r1, r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003544:	f7fe fb68 	bl	8001c18 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe fb63 	bl	8001c18 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	@ 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1f5      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_OscConfig+0x344>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4013      	ands	r3, r2
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_OscConfig+0x348>
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	4b02      	ldr	r3, [pc, #8]	@ (8003584 <HAL_RCC_OscConfig+0x338>)
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	621a      	str	r2, [r3, #32]
 8003580:	e036      	b.n	80035f0 <HAL_RCC_OscConfig+0x3a4>
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	40021000 	.word	0x40021000
 8003588:	fffeffff 	.word	0xfffeffff
 800358c:	fffbffff 	.word	0xfffbffff
 8003590:	40007000 	.word	0x40007000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10c      	bne.n	80035b6 <HAL_RCC_OscConfig+0x36a>
 800359c:	4bca      	ldr	r3, [pc, #808]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	4bc9      	ldr	r3, [pc, #804]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	621a      	str	r2, [r3, #32]
 80035a8:	4bc7      	ldr	r3, [pc, #796]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	4bc6      	ldr	r3, [pc, #792]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035ae:	2104      	movs	r1, #4
 80035b0:	438a      	bics	r2, r1
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e01c      	b.n	80035f0 <HAL_RCC_OscConfig+0x3a4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x38c>
 80035be:	4bc2      	ldr	r3, [pc, #776]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	4bc1      	ldr	r3, [pc, #772]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035c4:	2104      	movs	r1, #4
 80035c6:	430a      	orrs	r2, r1
 80035c8:	621a      	str	r2, [r3, #32]
 80035ca:	4bbf      	ldr	r3, [pc, #764]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	4bbe      	ldr	r3, [pc, #760]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	430a      	orrs	r2, r1
 80035d4:	621a      	str	r2, [r3, #32]
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0x3a4>
 80035d8:	4bbb      	ldr	r3, [pc, #748]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	4bba      	ldr	r3, [pc, #744]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035de:	2101      	movs	r1, #1
 80035e0:	438a      	bics	r2, r1
 80035e2:	621a      	str	r2, [r3, #32]
 80035e4:	4bb8      	ldr	r3, [pc, #736]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	4bb7      	ldr	r3, [pc, #732]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80035ea:	2104      	movs	r1, #4
 80035ec:	438a      	bics	r2, r1
 80035ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d014      	beq.n	8003622 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fb0e 	bl	8001c18 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e009      	b.n	8003616 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fb09 	bl	8001c18 <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	4aaf      	ldr	r2, [pc, #700]	@ (80038cc <HAL_RCC_OscConfig+0x680>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e19a      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	4bac      	ldr	r3, [pc, #688]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x3b6>
 8003620:	e013      	b.n	800364a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7fe faf9 	bl	8001c18 <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362a:	e009      	b.n	8003640 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe faf4 	bl	8001c18 <HAL_GetTick>
 8003630:	0002      	movs	r2, r0
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	4aa5      	ldr	r2, [pc, #660]	@ (80038cc <HAL_RCC_OscConfig+0x680>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e185      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003640:	4ba1      	ldr	r3, [pc, #644]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800364a:	231f      	movs	r3, #31
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003654:	4b9c      	ldr	r3, [pc, #624]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	4b9b      	ldr	r3, [pc, #620]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800365a:	499d      	ldr	r1, [pc, #628]	@ (80038d0 <HAL_RCC_OscConfig+0x684>)
 800365c:	400a      	ands	r2, r1
 800365e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d12a      	bne.n	80036c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003672:	4b95      	ldr	r3, [pc, #596]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003676:	4b94      	ldr	r3, [pc, #592]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003678:	2104      	movs	r1, #4
 800367a:	430a      	orrs	r2, r1
 800367c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800367e:	4b92      	ldr	r3, [pc, #584]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003682:	4b91      	ldr	r3, [pc, #580]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003684:	2101      	movs	r1, #1
 8003686:	430a      	orrs	r2, r1
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368a:	f7fe fac5 	bl	8001c18 <HAL_GetTick>
 800368e:	0003      	movs	r3, r0
 8003690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003694:	f7fe fac0 	bl	8001c18 <HAL_GetTick>
 8003698:	0002      	movs	r2, r0
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e152      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036a6:	4b88      	ldr	r3, [pc, #544]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	d0f1      	beq.n	8003694 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036b0:	4b85      	ldr	r3, [pc, #532]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	22f8      	movs	r2, #248	@ 0xf8
 80036b6:	4393      	bics	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	00da      	lsls	r2, r3, #3
 80036c0:	4b81      	ldr	r3, [pc, #516]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80036c6:	e034      	b.n	8003732 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	3305      	adds	r3, #5
 80036ce:	d111      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036d0:	4b7d      	ldr	r3, [pc, #500]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d4:	4b7c      	ldr	r3, [pc, #496]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036d6:	2104      	movs	r1, #4
 80036d8:	438a      	bics	r2, r1
 80036da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036dc:	4b7a      	ldr	r3, [pc, #488]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e0:	22f8      	movs	r2, #248	@ 0xf8
 80036e2:	4393      	bics	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	4b76      	ldr	r3, [pc, #472]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036ee:	430a      	orrs	r2, r1
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80036f2:	e01e      	b.n	8003732 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036f4:	4b74      	ldr	r3, [pc, #464]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f8:	4b73      	ldr	r3, [pc, #460]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	2104      	movs	r1, #4
 80036fc:	430a      	orrs	r2, r1
 80036fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003700:	4b71      	ldr	r3, [pc, #452]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003704:	4b70      	ldr	r3, [pc, #448]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003706:	2101      	movs	r1, #1
 8003708:	438a      	bics	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe fa84 	bl	8001c18 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003716:	f7fe fa7f 	bl	8001c18 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e111      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003728:	4b67      	ldr	r3, [pc, #412]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	2202      	movs	r2, #2
 800372e:	4013      	ands	r3, r2
 8003730:	d1f1      	bne.n	8003716 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d05c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800373c:	4b62      	ldr	r3, [pc, #392]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	220c      	movs	r2, #12
 8003742:	4013      	ands	r3, r2
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d00e      	beq.n	8003766 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003748:	4b5f      	ldr	r3, [pc, #380]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	220c      	movs	r2, #12
 800374e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003750:	2b08      	cmp	r3, #8
 8003752:	d114      	bne.n	800377e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003754:	4b5c      	ldr	r3, [pc, #368]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	23c0      	movs	r3, #192	@ 0xc0
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	401a      	ands	r2, r3
 800375e:	23c0      	movs	r3, #192	@ 0xc0
 8003760:	025b      	lsls	r3, r3, #9
 8003762:	429a      	cmp	r2, r3
 8003764:	d10b      	bne.n	800377e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003766:	4b58      	ldr	r3, [pc, #352]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	4013      	ands	r3, r2
 8003770:	d040      	beq.n	80037f4 <HAL_RCC_OscConfig+0x5a8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d03c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0e6      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01b      	beq.n	80037be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003786:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800378a:	4b4f      	ldr	r3, [pc, #316]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800378c:	2180      	movs	r1, #128	@ 0x80
 800378e:	0249      	lsls	r1, r1, #9
 8003790:	430a      	orrs	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe fa40 	bl	8001c18 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800379e:	f7fe fa3b 	bl	8001c18 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0cd      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80037b0:	4b45      	ldr	r3, [pc, #276]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80037b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x552>
 80037bc:	e01b      	b.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80037c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80037c4:	4943      	ldr	r1, [pc, #268]	@ (80038d4 <HAL_RCC_OscConfig+0x688>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe fa25 	bl	8001c18 <HAL_GetTick>
 80037ce:	0003      	movs	r3, r0
 80037d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d4:	f7fe fa20 	bl	8001c18 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0b2      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037e6:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80037e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	4013      	ands	r3, r2
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x588>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80037f4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d100      	bne.n	8003800 <HAL_RCC_OscConfig+0x5b4>
 80037fe:	e0a4      	b.n	800394a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	220c      	movs	r2, #12
 8003806:	4013      	ands	r3, r2
 8003808:	2b08      	cmp	r3, #8
 800380a:	d100      	bne.n	800380e <HAL_RCC_OscConfig+0x5c2>
 800380c:	e078      	b.n	8003900 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	2b02      	cmp	r3, #2
 8003814:	d14c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800381c:	492e      	ldr	r1, [pc, #184]	@ (80038d8 <HAL_RCC_OscConfig+0x68c>)
 800381e:	400a      	ands	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe f9f9 	bl	8001c18 <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe f9f4 	bl	8001c18 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e086      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383e:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	049b      	lsls	r3, r3, #18
 8003846:	4013      	ands	r3, r2
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384a:	4b1f      	ldr	r3, [pc, #124]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	220f      	movs	r2, #15
 8003850:	4393      	bics	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003858:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800385a:	430a      	orrs	r2, r1
 800385c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800385e:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4a1e      	ldr	r2, [pc, #120]	@ (80038dc <HAL_RCC_OscConfig+0x690>)
 8003864:	4013      	ands	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	431a      	orrs	r2, r3
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 800387e:	2180      	movs	r1, #128	@ 0x80
 8003880:	0449      	lsls	r1, r1, #17
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe f9c7 	bl	8001c18 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe f9c2 	bl	8001c18 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e054      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	049b      	lsls	r3, r3, #18
 80038aa:	4013      	ands	r3, r2
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x644>
 80038ae:	e04c      	b.n	800394a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <HAL_RCC_OscConfig+0x67c>)
 80038b6:	4908      	ldr	r1, [pc, #32]	@ (80038d8 <HAL_RCC_OscConfig+0x68c>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe f9ac 	bl	8001c18 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c4:	e015      	b.n	80038f2 <HAL_RCC_OscConfig+0x6a6>
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	40021000 	.word	0x40021000
 80038cc:	00001388 	.word	0x00001388
 80038d0:	efffffff 	.word	0xefffffff
 80038d4:	fffeffff 	.word	0xfffeffff
 80038d8:	feffffff 	.word	0xfeffffff
 80038dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe f99a 	bl	8001c18 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e02c      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <HAL_RCC_OscConfig+0x708>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	049b      	lsls	r3, r3, #18
 80038fa:	4013      	ands	r3, r2
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x694>
 80038fe:	e024      	b.n	800394a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01f      	b.n	800394c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_RCC_OscConfig+0x708>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_RCC_OscConfig+0x708>)
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	025b      	lsls	r3, r3, #9
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	429a      	cmp	r2, r3
 8003926:	d10e      	bne.n	8003946 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	220f      	movs	r2, #15
 800392c:	401a      	ands	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d107      	bne.n	8003946 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	23f0      	movs	r3, #240	@ 0xf0
 800393a:	039b      	lsls	r3, r3, #14
 800393c:	401a      	ands	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b008      	add	sp, #32
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0bf      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b61      	ldr	r3, [pc, #388]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	4013      	ands	r3, r2
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d911      	bls.n	800399e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b5e      	ldr	r3, [pc, #376]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	4393      	bics	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	4b5b      	ldr	r3, [pc, #364]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398c:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0a6      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2202      	movs	r2, #2
 80039a4:	4013      	ands	r3, r2
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2204      	movs	r2, #4
 80039ae:	4013      	ands	r3, r2
 80039b0:	d006      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039b2:	4b51      	ldr	r3, [pc, #324]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4b50      	ldr	r3, [pc, #320]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 80039b8:	21e0      	movs	r1, #224	@ 0xe0
 80039ba:	00c9      	lsls	r1, r1, #3
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b4d      	ldr	r3, [pc, #308]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	22f0      	movs	r2, #240	@ 0xf0
 80039c6:	4393      	bics	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	4b4a      	ldr	r3, [pc, #296]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	4013      	ands	r3, r2
 80039dc:	d04c      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b44      	ldr	r3, [pc, #272]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	4013      	ands	r3, r2
 80039f0:	d120      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07a      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b3e      	ldr	r3, [pc, #248]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	049b      	lsls	r3, r3, #18
 8003a06:	4013      	ands	r3, r2
 8003a08:	d114      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e06e      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a16:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e062      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e05b      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fe f8e6 	bl	8001c18 <HAL_GetTick>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a52:	f7fe f8e1 	bl	8001c18 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <HAL_RCC_ClockConfig+0x1a4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e042      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1ec      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d211      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	4b18      	ldr	r3, [pc, #96]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b16      	ldr	r3, [pc, #88]	@ (8003af4 <HAL_RCC_ClockConfig+0x19c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e020      	b.n	8003aec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <HAL_RCC_ClockConfig+0x1a8>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ac8:	f000 f820 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003acc:	0001      	movs	r1, r0
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <HAL_RCC_ClockConfig+0x1a0>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <HAL_RCC_ClockConfig+0x1ac>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	000a      	movs	r2, r1
 8003ade:	40da      	lsrs	r2, r3
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f7fe f851 	bl	8001b8c <HAL_InitTick>
  
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40021000 	.word	0x40021000
 8003afc:	00001388 	.word	0x00001388
 8003b00:	fffff8ff 	.word	0xfffff8ff
 8003b04:	080050b8 	.word	0x080050b8
 8003b08:	20000010 	.word	0x20000010

08003b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b26:	4b2d      	ldr	r3, [pc, #180]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	220c      	movs	r2, #12
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d046      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xb8>
 8003b36:	d848      	bhi.n	8003bca <HAL_RCC_GetSysClockFreq+0xbe>
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d002      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x36>
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x3c>
 8003b40:	e043      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b42:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b44:	613b      	str	r3, [r7, #16]
      break;
 8003b46:	e043      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	4013      	ands	r3, r2
 8003b50:	4a24      	ldr	r2, [pc, #144]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b56:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	4a22      	ldr	r2, [pc, #136]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	23c0      	movs	r3, #192	@ 0xc0
 8003b68:	025b      	lsls	r3, r3, #9
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d109      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	481a      	ldr	r0, [pc, #104]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b78:	f7fc fac6 	bl	8000108 <__udivsi3>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	001a      	movs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4353      	muls	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e01a      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	23c0      	movs	r3, #192	@ 0xc0
 8003b8c:	025b      	lsls	r3, r3, #9
 8003b8e:	401a      	ands	r2, r3
 8003b90:	23c0      	movs	r3, #192	@ 0xc0
 8003b92:	025b      	lsls	r3, r3, #9
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d109      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4814      	ldr	r0, [pc, #80]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xe0>)
 8003b9c:	f7fc fab4 	bl	8000108 <__udivsi3>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4353      	muls	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bb0:	f7fc faaa 	bl	8000108 <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4353      	muls	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
      break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xe0>)
 8003bc6:	613b      	str	r3, [r7, #16]
      break;
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bca:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bcc:	613b      	str	r3, [r7, #16]
      break;
 8003bce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003bd0:	693b      	ldr	r3, [r7, #16]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	007a1200 	.word	0x007a1200
 8003be4:	080050c8 	.word	0x080050c8
 8003be8:	080050d8 	.word	0x080050d8
 8003bec:	02dc6c00 	.word	0x02dc6c00

08003bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0a8      	b.n	8003d54 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	2382      	movs	r3, #130	@ 0x82
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d009      	beq.n	8003c2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	61da      	str	r2, [r3, #28]
 8003c1c:	e005      	b.n	8003c2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	225d      	movs	r2, #93	@ 0x5d
 8003c34:	5c9b      	ldrb	r3, [r3, r2]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	225c      	movs	r2, #92	@ 0x5c
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fd fe1e 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	225d      	movs	r2, #93	@ 0x5d
 8003c50:	2102      	movs	r1, #2
 8003c52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2140      	movs	r1, #64	@ 0x40
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	23e0      	movs	r3, #224	@ 0xe0
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d902      	bls.n	8003c76 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e002      	b.n	8003c7c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	015b      	lsls	r3, r3, #5
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	23f0      	movs	r3, #240	@ 0xf0
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d008      	beq.n	8003c9a <HAL_SPI_Init+0xaa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	23e0      	movs	r3, #224	@ 0xe0
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d002      	beq.n	8003c9a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	2382      	movs	r3, #130	@ 0x82
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	2384      	movs	r3, #132	@ 0x84
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	400b      	ands	r3, r1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6999      	ldr	r1, [r3, #24]
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	400b      	ands	r3, r1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2138      	movs	r1, #56	@ 0x38
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	2204      	movs	r2, #4
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2110      	movs	r1, #16
 8003d08:	400b      	ands	r3, r1
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d10:	2108      	movs	r1, #8
 8003d12:	400b      	ands	r3, r1
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68d9      	ldr	r1, [r3, #12]
 8003d1a:	23f0      	movs	r3, #240	@ 0xf0
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	400b      	ands	r3, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	0011      	movs	r1, r2
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	015b      	lsls	r3, r3, #5
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4907      	ldr	r1, [pc, #28]	@ (8003d5c <HAL_SPI_Init+0x16c>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	225d      	movs	r2, #93	@ 0x5d
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fffff7ff 	.word	0xfffff7ff

08003d60 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d6e:	2317      	movs	r3, #23
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	225c      	movs	r2, #92	@ 0x5c
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_SPI_Transmit_DMA+0x24>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e0e3      	b.n	8003f4c <HAL_SPI_Transmit_DMA+0x1ec>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	225c      	movs	r2, #92	@ 0x5c
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	225d      	movs	r2, #93	@ 0x5d
 8003d90:	5c9b      	ldrb	r3, [r3, r2]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d004      	beq.n	8003da2 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8003d98:	2317      	movs	r3, #23
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003da0:	e0cd      	b.n	8003f3e <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_Transmit_DMA+0x50>
 8003da8:	1dbb      	adds	r3, r7, #6
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8003db0:	2317      	movs	r3, #23
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
    goto error;
 8003db8:	e0c1      	b.n	8003f3e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	225d      	movs	r2, #93	@ 0x5d
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1dba      	adds	r2, r7, #6
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1dba      	adds	r2, r7, #6
 8003dda:	8812      	ldrh	r2, [r2, #0]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2244      	movs	r2, #68	@ 0x44
 8003df4:	2100      	movs	r1, #0
 8003df6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2246      	movs	r2, #70	@ 0x46
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d110      	bne.n	8003e2e <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2140      	movs	r1, #64	@ 0x40
 8003e18:	438a      	bics	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	01c9      	lsls	r1, r1, #7
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_SPI_Transmit_DMA+0x1f4>)
 8003e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	4a47      	ldr	r2, [pc, #284]	@ (8003f58 <HAL_SPI_Transmit_DMA+0x1f8>)
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e42:	4a46      	ldr	r2, [pc, #280]	@ (8003f5c <HAL_SPI_Transmit_DMA+0x1fc>)
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4941      	ldr	r1, [pc, #260]	@ (8003f60 <HAL_SPI_Transmit_DMA+0x200>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	23e0      	movs	r3, #224	@ 0xe0
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d82f      	bhi.n	8003eca <HAL_SPI_Transmit_DMA+0x16a>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d128      	bne.n	8003eca <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	001a      	movs	r2, r3
 8003e80:	2301      	movs	r3, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	d10f      	bne.n	8003ea6 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4933      	ldr	r1, [pc, #204]	@ (8003f60 <HAL_SPI_Transmit_DMA+0x200>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ea4:	e011      	b.n	8003eca <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2180      	movs	r1, #128	@ 0x80
 8003eb2:	01c9      	lsls	r1, r1, #7
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ee2:	f7fe fe5f 	bl	8002ba4 <HAL_DMA_Start_IT>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eee:	2210      	movs	r2, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003ef6:	2317      	movs	r3, #23
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]

    goto error;
 8003efe:	e01e      	b.n	8003f3e <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2240      	movs	r2, #64	@ 0x40
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	d007      	beq.n	8003f1e <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2140      	movs	r1, #64	@ 0x40
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2120      	movs	r1, #32
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2102      	movs	r1, #2
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	225c      	movs	r2, #92	@ 0x5c
 8003f42:	2100      	movs	r1, #0
 8003f44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f46:	2317      	movs	r3, #23
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b006      	add	sp, #24
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	080046df 	.word	0x080046df
 8003f58:	080044ed 	.word	0x080044ed
 8003f5c:	08004739 	.word	0x08004739
 8003f60:	ffffbfff 	.word	0xffffbfff

08003f64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	001a      	movs	r2, r3
 8003f72:	1cbb      	adds	r3, r7, #2
 8003f74:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f76:	2317      	movs	r3, #23
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	225c      	movs	r2, #92	@ 0x5c
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_SPI_TransmitReceive_DMA+0x28>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e17e      	b.n	800428a <HAL_SPI_TransmitReceive_DMA+0x326>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	225c      	movs	r2, #92	@ 0x5c
 8003f90:	2101      	movs	r1, #1
 8003f92:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f94:	2016      	movs	r0, #22
 8003f96:	183b      	adds	r3, r7, r0
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	215d      	movs	r1, #93	@ 0x5d
 8003f9c:	5c52      	ldrb	r2, [r2, r1]
 8003f9e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003fa6:	0001      	movs	r1, r0
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d011      	beq.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x70>
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	2382      	movs	r3, #130	@ 0x82
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d107      	bne.n	8003fca <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_SPI_TransmitReceive_DMA+0x66>
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d004      	beq.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8003fca:	2317      	movs	r3, #23
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003fd2:	e153      	b.n	800427c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_SPI_TransmitReceive_DMA+0x84>
 8003fe0:	1cbb      	adds	r3, r7, #2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2317      	movs	r3, #23
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ff0:	e144      	b.n	800427c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	225d      	movs	r2, #93	@ 0x5d
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	225d      	movs	r2, #93	@ 0x5d
 8004002:	2105      	movs	r1, #5
 8004004:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1cba      	adds	r2, r7, #2
 8004016:	8812      	ldrh	r2, [r2, #0]
 8004018:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1cba      	adds	r2, r7, #2
 800401e:	8812      	ldrh	r2, [r2, #0]
 8004020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1cba      	adds	r2, r7, #2
 800402c:	2144      	movs	r1, #68	@ 0x44
 800402e:	8812      	ldrh	r2, [r2, #0]
 8004030:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1cba      	adds	r2, r7, #2
 8004036:	2146      	movs	r1, #70	@ 0x46
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	651a      	str	r2, [r3, #80]	@ 0x50
    goto error;
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4990      	ldr	r1, [pc, #576]	@ (8004294 <HAL_SPI_TransmitReceive_DMA+0x330>)
 8004054:	400a      	ands	r2, r1
 8004056:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	23e0      	movs	r3, #224	@ 0xe0
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	429a      	cmp	r2, r3
 8004062:	d908      	bls.n	8004076 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	498a      	ldr	r1, [pc, #552]	@ (8004298 <HAL_SPI_TransmitReceive_DMA+0x334>)
 8004070:	400a      	ands	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	e074      	b.n	8004160 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2180      	movs	r1, #128	@ 0x80
 8004082:	0149      	lsls	r1, r1, #5
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	429a      	cmp	r2, r3
 8004094:	d127      	bne.n	80040e6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800409a:	001a      	movs	r2, r3
 800409c:	2301      	movs	r3, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	d10f      	bne.n	80040c2 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	497b      	ldr	r1, [pc, #492]	@ (800429c <HAL_SPI_TransmitReceive_DMA+0x338>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040c0:	e011      	b.n	80040e6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2180      	movs	r1, #128	@ 0x80
 80040ce:	01c9      	lsls	r1, r1, #7
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d135      	bne.n	8004160 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4966      	ldr	r1, [pc, #408]	@ (8004298 <HAL_SPI_TransmitReceive_DMA+0x334>)
 8004100:	400a      	ands	r2, r1
 8004102:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2246      	movs	r2, #70	@ 0x46
 8004108:	5a9b      	ldrh	r3, [r3, r2]
 800410a:	b29b      	uxth	r3, r3
 800410c:	001a      	movs	r2, r3
 800410e:	2301      	movs	r3, #1
 8004110:	4013      	ands	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4960      	ldr	r1, [pc, #384]	@ (80042a0 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8004120:	400a      	ands	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2246      	movs	r2, #70	@ 0x46
 8004128:	5a9b      	ldrh	r3, [r3, r2]
 800412a:	b29b      	uxth	r3, r3
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b299      	uxth	r1, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2246      	movs	r2, #70	@ 0x46
 8004134:	5299      	strh	r1, [r3, r2]
 8004136:	e013      	b.n	8004160 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2180      	movs	r1, #128	@ 0x80
 8004144:	0189      	lsls	r1, r1, #6
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2246      	movs	r2, #70	@ 0x46
 800414e:	5a9b      	ldrh	r3, [r3, r2]
 8004150:	b29b      	uxth	r3, r3
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	b29b      	uxth	r3, r3
 8004156:	3301      	adds	r3, #1
 8004158:	b299      	uxth	r1, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2246      	movs	r2, #70	@ 0x46
 800415e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	225d      	movs	r2, #93	@ 0x5d
 8004164:	5c9b      	ldrb	r3, [r3, r2]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b04      	cmp	r3, #4
 800416a:	d108      	bne.n	800417e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	4a4c      	ldr	r2, [pc, #304]	@ (80042a4 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	4a4b      	ldr	r2, [pc, #300]	@ (80042a8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
 800417c:	e007      	b.n	800418e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	4a4a      	ldr	r2, [pc, #296]	@ (80042ac <HAL_SPI_TransmitReceive_DMA+0x348>)
 8004184:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	4a49      	ldr	r2, [pc, #292]	@ (80042b0 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800418c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004192:	4a48      	ldr	r2, [pc, #288]	@ (80042b4 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	2200      	movs	r2, #0
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	0019      	movs	r1, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2246      	movs	r2, #70	@ 0x46
 80041b4:	5a9b      	ldrh	r3, [r3, r2]
 80041b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041b8:	0022      	movs	r2, r4
 80041ba:	f7fe fcf3 	bl	8002ba4 <HAL_DMA_Start_IT>
 80041be:	1e03      	subs	r3, r0, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_SPI_TransmitReceive_DMA+0x274>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c6:	2210      	movs	r2, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80041ce:	2317      	movs	r3, #23
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]

    goto error;
 80041d6:	e051      	b.n	800427c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	2200      	movs	r2, #0
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	0019      	movs	r1, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004220:	f7fe fcc0 	bl	8002ba4 <HAL_DMA_Start_IT>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d00a      	beq.n	800423e <HAL_SPI_TransmitReceive_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	2210      	movs	r2, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004234:	2317      	movs	r3, #23
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]

    goto error;
 800423c:	e01e      	b.n	800427c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2240      	movs	r2, #64	@ 0x40
 8004246:	4013      	ands	r3, r2
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	d007      	beq.n	800425c <HAL_SPI_TransmitReceive_DMA+0x2f8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2140      	movs	r1, #64	@ 0x40
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2120      	movs	r1, #32
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2102      	movs	r1, #2
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	225c      	movs	r2, #92	@ 0x5c
 8004280:	2100      	movs	r1, #0
 8004282:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004284:	2317      	movs	r3, #23
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	781b      	ldrb	r3, [r3, #0]
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b007      	add	sp, #28
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	ffff9fff 	.word	0xffff9fff
 8004298:	ffffefff 	.word	0xffffefff
 800429c:	ffffbfff 	.word	0xffffbfff
 80042a0:	ffffdfff 	.word	0xffffdfff
 80042a4:	080046fd 	.word	0x080046fd
 80042a8:	08004599 	.word	0x08004599
 80042ac:	0800471b 	.word	0x0800471b
 80042b0:	08004649 	.word	0x08004649
 80042b4:	08004739 	.word	0x08004739

080042b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2240      	movs	r2, #64	@ 0x40
 80042d4:	4013      	ands	r3, r2
 80042d6:	d10d      	bne.n	80042f4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2201      	movs	r2, #1
 80042dc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042de:	d009      	beq.n	80042f4 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2240      	movs	r2, #64	@ 0x40
 80042e4:	4013      	ands	r3, r2
 80042e6:	d005      	beq.n	80042f4 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	0010      	movs	r0, r2
 80042f0:	4798      	blx	r3
    return;
 80042f2:	e0c5      	b.n	8004480 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_IRQHandler+0x58>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2280      	movs	r2, #128	@ 0x80
 8004300:	4013      	ands	r3, r2
 8004302:	d005      	beq.n	8004310 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	0010      	movs	r0, r2
 800430c:	4798      	blx	r3
    return;
 800430e:	e0b7      	b.n	8004480 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2220      	movs	r2, #32
 8004314:	4013      	ands	r3, r2
 8004316:	d109      	bne.n	800432c <HAL_SPI_IRQHandler+0x74>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2240      	movs	r2, #64	@ 0x40
 800431c:	4013      	ands	r3, r2
 800431e:	d105      	bne.n	800432c <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	2380      	movs	r3, #128	@ 0x80
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4013      	ands	r3, r2
 8004328:	d100      	bne.n	800432c <HAL_SPI_IRQHandler+0x74>
 800432a:	e0a9      	b.n	8004480 <HAL_SPI_IRQHandler+0x1c8>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2220      	movs	r2, #32
 8004330:	4013      	ands	r3, r2
 8004332:	d100      	bne.n	8004336 <HAL_SPI_IRQHandler+0x7e>
 8004334:	e0a4      	b.n	8004480 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2240      	movs	r2, #64	@ 0x40
 800433a:	4013      	ands	r3, r2
 800433c:	d023      	beq.n	8004386 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	225d      	movs	r2, #93	@ 0x5d
 8004342:	5c9b      	ldrb	r3, [r3, r2]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b03      	cmp	r3, #3
 8004348:	d011      	beq.n	800436e <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434e:	2204      	movs	r2, #4
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	e00b      	b.n	8004386 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]
        return;
 8004384:	e07c      	b.n	8004480 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2220      	movs	r2, #32
 800438a:	4013      	ands	r3, r2
 800438c:	d014      	beq.n	80043b8 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004392:	2201      	movs	r2, #1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	438a      	bics	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	2380      	movs	r3, #128	@ 0x80
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	d00c      	beq.n	80043dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	2208      	movs	r2, #8
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d04c      	beq.n	800447e <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	21e0      	movs	r1, #224	@ 0xe0
 80043f0:	438a      	bics	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	225d      	movs	r2, #93	@ 0x5d
 80043f8:	2101      	movs	r1, #1
 80043fa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	d103      	bne.n	800440c <HAL_SPI_IRQHandler+0x154>
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d032      	beq.n	8004472 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2103      	movs	r1, #3
 8004418:	438a      	bics	r2, r1
 800441a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004428:	4a17      	ldr	r2, [pc, #92]	@ (8004488 <HAL_SPI_IRQHandler+0x1d0>)
 800442a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	0018      	movs	r0, r3
 8004432:	f7fe fc1d 	bl	8002c70 <HAL_DMA_Abort_IT>
 8004436:	1e03      	subs	r3, r0, #0
 8004438:	d005      	beq.n	8004446 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	2240      	movs	r2, #64	@ 0x40
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_SPI_IRQHandler+0x1d0>)
 8004454:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	0018      	movs	r0, r3
 800445c:	f7fe fc08 	bl	8002c70 <HAL_DMA_Abort_IT>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d00b      	beq.n	800447c <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	2240      	movs	r2, #64	@ 0x40
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004470:	e004      	b.n	800447c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f831 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800447a:	e000      	b.n	800447e <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 800447c:	46c0      	nop			@ (mov r8, r8)
    return;
 800447e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004480:	46bd      	mov	sp, r7
 8004482:	b008      	add	sp, #32
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	0800477b 	.word	0x0800477b

0800448c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80044b4:	46c0      	nop			@ (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b002      	add	sp, #8
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fa:	f7fd fb8d 	bl	8001c18 <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2220      	movs	r2, #32
 800450a:	4013      	ands	r3, r2
 800450c:	2b20      	cmp	r3, #32
 800450e:	d03c      	beq.n	800458a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2120      	movs	r1, #32
 800451c:	438a      	bics	r2, r1
 800451e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2102      	movs	r1, #2
 800452c:	438a      	bics	r2, r1
 800452e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2164      	movs	r1, #100	@ 0x64
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fac4 	bl	8004ac4 <SPI_EndRxTxTransaction>
 800453c:	1e03      	subs	r3, r0, #0
 800453e:	d005      	beq.n	800454c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	2220      	movs	r2, #32
 8004546:	431a      	orrs	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	225d      	movs	r2, #93	@ 0x5d
 8004574:	2101      	movs	r1, #1
 8004576:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ffaa 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004588:	e003      	b.n	8004592 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff ff7d 	bl	800448c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004592:	46bd      	mov	sp, r7
 8004594:	b006      	add	sp, #24
 8004596:	bd80      	pop	{r7, pc}

08004598 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a6:	f7fd fb37 	bl	8001c18 <HAL_GetTick>
 80045aa:	0003      	movs	r3, r0
 80045ac:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2220      	movs	r2, #32
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d03e      	beq.n	800463a <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2120      	movs	r1, #32
 80045c8:	438a      	bics	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10e      	bne.n	80045f2 <SPI_DMAReceiveCplt+0x5a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	2382      	movs	r3, #130	@ 0x82
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	429a      	cmp	r2, r3
 80045de:	d108      	bne.n	80045f2 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2103      	movs	r1, #3
 80045ec:	438a      	bics	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	e007      	b.n	8004602 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2101      	movs	r1, #1
 80045fe:	438a      	bics	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2164      	movs	r1, #100	@ 0x64
 8004608:	0018      	movs	r0, r3
 800460a:	f000 f9fd 	bl	8004a08 <SPI_EndRxTransaction>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d002      	beq.n	8004618 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2246      	movs	r2, #70	@ 0x46
 800461c:	2100      	movs	r1, #0
 800461e:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	225d      	movs	r2, #93	@ 0x5d
 8004624:	2101      	movs	r1, #1
 8004626:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	0018      	movs	r0, r3
 8004634:	f7ff ff52 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004638:	e003      	b.n	8004642 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff ff2d 	bl	800449c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004642:	46bd      	mov	sp, r7
 8004644:	b004      	add	sp, #16
 8004646:	bd80      	pop	{r7, pc}

08004648 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004656:	f7fd fadf 	bl	8001c18 <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2220      	movs	r2, #32
 8004666:	4013      	ands	r3, r2
 8004668:	2b20      	cmp	r3, #32
 800466a:	d031      	beq.n	80046d0 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2120      	movs	r1, #32
 8004678:	438a      	bics	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2164      	movs	r1, #100	@ 0x64
 8004682:	0018      	movs	r0, r3
 8004684:	f000 fa1e 	bl	8004ac4 <SPI_EndRxTxTransaction>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d005      	beq.n	8004698 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004690:	2220      	movs	r2, #32
 8004692:	431a      	orrs	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2103      	movs	r1, #3
 80046a4:	438a      	bics	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2246      	movs	r2, #70	@ 0x46
 80046b2:	2100      	movs	r1, #0
 80046b4:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	225d      	movs	r2, #93	@ 0x5d
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ff07 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80046ce:	e003      	b.n	80046d8 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f7fd f824 	bl	8001720 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}

080046de <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7ff fedc 	bl	80044ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046f4:	46c0      	nop			@ (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b004      	add	sp, #16
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff fed5 	bl	80044bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	b004      	add	sp, #16
 8004718:	bd80      	pop	{r7, pc}

0800471a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0018      	movs	r0, r3
 800472c:	f7ff fece 	bl	80044cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004730:	46c0      	nop			@ (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}

08004738 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2103      	movs	r1, #3
 8004752:	438a      	bics	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475a:	2210      	movs	r2, #16
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	225d      	movs	r2, #93	@ 0x5d
 8004766:	2101      	movs	r1, #1
 8004768:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff feb5 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}

0800477a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2246      	movs	r2, #70	@ 0x46
 800478c:	2100      	movs	r1, #0
 800478e:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff fe9f 	bl	80044dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047b8:	f7fd fa2e 	bl	8001c18 <HAL_GetTick>
 80047bc:	0002      	movs	r2, r0
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047c8:	f7fd fa26 	bl	8001c18 <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047d0:	4b3a      	ldr	r3, [pc, #232]	@ (80048bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	0d1b      	lsrs	r3, r3, #20
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	4353      	muls	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047de:	e058      	b.n	8004892 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	d055      	beq.n	8004892 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e6:	f7fd fa17 	bl	8001c18 <HAL_GetTick>
 80047ea:	0002      	movs	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d902      	bls.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d142      	bne.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	21e0      	movs	r1, #224	@ 0xe0
 8004808:	438a      	bics	r2, r1
 800480a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	2382      	movs	r3, #130	@ 0x82
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	429a      	cmp	r2, r3
 8004816:	d113      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	429a      	cmp	r2, r3
 8004822:	d005      	beq.n	8004830 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2140      	movs	r1, #64	@ 0x40
 800483c:	438a      	bics	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	429a      	cmp	r2, r3
 800484a:	d110      	bne.n	800486e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	491a      	ldr	r1, [pc, #104]	@ (80048c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004858:	400a      	ands	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	0189      	lsls	r1, r1, #6
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	225d      	movs	r2, #93	@ 0x5d
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	225c      	movs	r2, #92	@ 0x5c
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e017      	b.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3b01      	subs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	425a      	negs	r2, r3
 80048a2:	4153      	adcs	r3, r2
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	1dfb      	adds	r3, r7, #7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d197      	bne.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b008      	add	sp, #32
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	20000010 	.word	0x20000010
 80048c0:	ffffdfff 	.word	0xffffdfff

080048c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048d2:	2317      	movs	r3, #23
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048da:	f7fd f99d 	bl	8001c18 <HAL_GetTick>
 80048de:	0002      	movs	r2, r0
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	18d3      	adds	r3, r2, r3
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048ea:	f7fd f995 	bl	8001c18 <HAL_GetTick>
 80048ee:	0003      	movs	r3, r0
 80048f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	0013      	movs	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	189b      	adds	r3, r3, r2
 8004904:	00da      	lsls	r2, r3, #3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	0d1b      	lsrs	r3, r3, #20
 800490a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490c:	4353      	muls	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004910:	e068      	b.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	23c0      	movs	r3, #192	@ 0xc0
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	429a      	cmp	r2, r3
 800491a:	d10a      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	2117      	movs	r1, #23
 800492a:	187b      	adds	r3, r7, r1
 800492c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800492e:	187b      	adds	r3, r7, r1
 8004930:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	d055      	beq.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004938:	f7fd f96e 	bl	8001c18 <HAL_GetTick>
 800493c:	0002      	movs	r2, r0
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004944:	429a      	cmp	r2, r3
 8004946:	d902      	bls.n	800494e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d142      	bne.n	80049d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	21e0      	movs	r1, #224	@ 0xe0
 800495a:	438a      	bics	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	2382      	movs	r3, #130	@ 0x82
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	429a      	cmp	r2, r3
 8004968:	d113      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xce>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	429a      	cmp	r2, r3
 8004974:	d005      	beq.n	8004982 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	429a      	cmp	r2, r3
 8004980:	d107      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	@ 0x40
 800498e:	438a      	bics	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004996:	2380      	movs	r3, #128	@ 0x80
 8004998:	019b      	lsls	r3, r3, #6
 800499a:	429a      	cmp	r2, r3
 800499c:	d110      	bne.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4916      	ldr	r1, [pc, #88]	@ (8004a04 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	0189      	lsls	r1, r1, #6
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	225d      	movs	r2, #93	@ 0x5d
 80049c4:	2101      	movs	r1, #1
 80049c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	225c      	movs	r2, #92	@ 0x5c
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e010      	b.n	80049f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d18e      	bne.n	8004912 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b00a      	add	sp, #40	@ 0x28
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	20000010 	.word	0x20000010
 8004a04:	ffffdfff 	.word	0xffffdfff

08004a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	2382      	movs	r3, #130	@ 0x82
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d113      	bne.n	8004a48 <SPI_EndRxTransaction+0x40>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d005      	beq.n	8004a38 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d107      	bne.n	8004a48 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	438a      	bics	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	0013      	movs	r3, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	2180      	movs	r1, #128	@ 0x80
 8004a56:	f7ff fea7 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 8004a5a:	1e03      	subs	r3, r0, #0
 8004a5c:	d007      	beq.n	8004a6e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a62:	2220      	movs	r2, #32
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e026      	b.n	8004abc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	2382      	movs	r3, #130	@ 0x82
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11f      	bne.n	8004aba <SPI_EndRxTransaction+0xb2>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d005      	beq.n	8004a92 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d113      	bne.n	8004aba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	23c0      	movs	r3, #192	@ 0xc0
 8004a96:	00d9      	lsls	r1, r3, #3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	0013      	movs	r3, r2
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f7ff ff0f 	bl	80048c4 <SPI_WaitFifoStateUntilTimeout>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d007      	beq.n	8004aba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aae:	2220      	movs	r2, #32
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e000      	b.n	8004abc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b004      	add	sp, #16
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	23c0      	movs	r3, #192	@ 0xc0
 8004ad4:	0159      	lsls	r1, r3, #5
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	0013      	movs	r3, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f7ff fef0 	bl	80048c4 <SPI_WaitFifoStateUntilTimeout>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d007      	beq.n	8004af8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	2220      	movs	r2, #32
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e027      	b.n	8004b48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	0013      	movs	r3, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	f7ff fe4f 	bl	80047a8 <SPI_WaitFlagStateUntilTimeout>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d007      	beq.n	8004b1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b12:	2220      	movs	r2, #32
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e014      	b.n	8004b48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	23c0      	movs	r3, #192	@ 0xc0
 8004b22:	00d9      	lsls	r1, r3, #3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	0013      	movs	r3, r2
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f7ff fec9 	bl	80048c4 <SPI_WaitFifoStateUntilTimeout>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d007      	beq.n	8004b46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e000      	b.n	8004b48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223d      	movs	r2, #61	@ 0x3d
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223c      	movs	r2, #60	@ 0x3c
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fc ff33 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	223d      	movs	r2, #61	@ 0x3d
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	0019      	movs	r1, r3
 8004b90:	0010      	movs	r0, r2
 8004b92:	f000 f987 	bl	8004ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2246      	movs	r2, #70	@ 0x46
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223e      	movs	r2, #62	@ 0x3e
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223f      	movs	r2, #63	@ 0x3f
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2240      	movs	r2, #64	@ 0x40
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2241      	movs	r2, #65	@ 0x41
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2242      	movs	r2, #66	@ 0x42
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2243      	movs	r2, #67	@ 0x43
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2244      	movs	r2, #68	@ 0x44
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2245      	movs	r2, #69	@ 0x45
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	223d      	movs	r2, #61	@ 0x3d
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223d      	movs	r2, #61	@ 0x3d
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e036      	b.n	8004c76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223d      	movs	r2, #61	@ 0x3d
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <HAL_TIM_Base_Start_IT+0x90>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00a      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x50>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	05db      	lsls	r3, r3, #23
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d004      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x50>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <HAL_TIM_Base_Start_IT+0x94>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d111      	bne.n	8004c64 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2207      	movs	r2, #7
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d010      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	e007      	b.n	8004c74 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b004      	add	sp, #16
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400

08004c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d021      	beq.n	8004cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	d01d      	beq.n	8004cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4252      	negs	r2, r2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f8d0 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e007      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 f8c3 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f8cf 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d01e      	beq.n	8004d3a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2205      	movs	r2, #5
 8004d02:	4252      	negs	r2, r2
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	23c0      	movs	r3, #192	@ 0xc0
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4013      	ands	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 f8a9 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e007      	b.n	8004d34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 f89c 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 f8a8 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d021      	beq.n	8004d86 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2208      	movs	r2, #8
 8004d46:	4013      	ands	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2209      	movs	r2, #9
 8004d50:	4252      	negs	r2, r2
 8004d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2204      	movs	r2, #4
 8004d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2203      	movs	r2, #3
 8004d62:	4013      	ands	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 f883 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004d6e:	e007      	b.n	8004d80 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 f876 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f882 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d022      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2210      	movs	r2, #16
 8004d92:	4013      	ands	r3, r2
 8004d94:	d01e      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2211      	movs	r2, #17
 8004d9c:	4252      	negs	r2, r2
 8004d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2208      	movs	r2, #8
 8004da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	23c0      	movs	r3, #192	@ 0xc0
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4013      	ands	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f85c 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e007      	b.n	8004dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 f84f 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f85b 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00c      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4013      	ands	r3, r2
 8004de2:	d008      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2202      	movs	r2, #2
 8004dea:	4252      	negs	r2, r2
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fc fca3 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2280      	movs	r2, #128	@ 0x80
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d00c      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2280      	movs	r2, #128	@ 0x80
 8004e02:	4013      	ands	r3, r2
 8004e04:	d008      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2281      	movs	r2, #129	@ 0x81
 8004e0c:	4252      	negs	r2, r2
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f8d2 	bl	8004fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2240      	movs	r2, #64	@ 0x40
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2240      	movs	r2, #64	@ 0x40
 8004e24:	4013      	ands	r3, r2
 8004e26:	d008      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2241      	movs	r2, #65	@ 0x41
 8004e2e:	4252      	negs	r2, r2
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 f82d 	bl	8004e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	4013      	ands	r3, r2
 8004e48:	d008      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2221      	movs	r2, #33	@ 0x21
 8004e50:	4252      	negs	r2, r2
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 f8a8 	bl	8004fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b004      	add	sp, #16
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e6c:	46c0      	nop			@ (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e8c:	46c0      	nop			@ (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b002      	add	sp, #8
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a37      	ldr	r2, [pc, #220]	@ (8004f94 <TIM_Base_SetConfig+0xf0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d008      	beq.n	8004ece <TIM_Base_SetConfig+0x2a>
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	05db      	lsls	r3, r3, #23
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x2a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	@ (8004f98 <TIM_Base_SetConfig+0xf4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2270      	movs	r2, #112	@ 0x70
 8004ed2:	4393      	bics	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <TIM_Base_SetConfig+0xf0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d014      	beq.n	8004f12 <TIM_Base_SetConfig+0x6e>
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	2380      	movs	r3, #128	@ 0x80
 8004eec:	05db      	lsls	r3, r3, #23
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d00f      	beq.n	8004f12 <TIM_Base_SetConfig+0x6e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a28      	ldr	r2, [pc, #160]	@ (8004f98 <TIM_Base_SetConfig+0xf4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_Base_SetConfig+0x6e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a27      	ldr	r2, [pc, #156]	@ (8004f9c <TIM_Base_SetConfig+0xf8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_Base_SetConfig+0x6e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a26      	ldr	r2, [pc, #152]	@ (8004fa0 <TIM_Base_SetConfig+0xfc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_Base_SetConfig+0x6e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	@ (8004fa4 <TIM_Base_SetConfig+0x100>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d108      	bne.n	8004f24 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <TIM_Base_SetConfig+0x104>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2280      	movs	r2, #128	@ 0x80
 8004f28:	4393      	bics	r3, r2
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a11      	ldr	r2, [pc, #68]	@ (8004f94 <TIM_Base_SetConfig+0xf0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_Base_SetConfig+0xbe>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a12      	ldr	r2, [pc, #72]	@ (8004fa0 <TIM_Base_SetConfig+0xfc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_Base_SetConfig+0xbe>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a11      	ldr	r2, [pc, #68]	@ (8004fa4 <TIM_Base_SetConfig+0x100>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d103      	bne.n	8004f6a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2201      	movs	r2, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2201      	movs	r2, #1
 8004f82:	4393      	bics	r3, r2
 8004f84:	001a      	movs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]
  }
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b004      	add	sp, #16
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40002000 	.word	0x40002000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800
 8004fa8:	fffffcff 	.word	0xfffffcff

08004fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b002      	add	sp, #8
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <memset>:
 8004fcc:	0003      	movs	r3, r0
 8004fce:	1882      	adds	r2, r0, r2
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d100      	bne.n	8004fd6 <memset+0xa>
 8004fd4:	4770      	bx	lr
 8004fd6:	7019      	strb	r1, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	e7f9      	b.n	8004fd0 <memset+0x4>

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	2600      	movs	r6, #0
 8004fe0:	4c0c      	ldr	r4, [pc, #48]	@ (8005014 <__libc_init_array+0x38>)
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8005018 <__libc_init_array+0x3c>)
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	2600      	movs	r6, #0
 8004fee:	f000 f819 	bl	8005024 <_init>
 8004ff2:	4c0a      	ldr	r4, [pc, #40]	@ (800501c <__libc_init_array+0x40>)
 8004ff4:	4d0a      	ldr	r5, [pc, #40]	@ (8005020 <__libc_init_array+0x44>)
 8004ff6:	1b64      	subs	r4, r4, r5
 8004ff8:	10a4      	asrs	r4, r4, #2
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	00b3      	lsls	r3, r6, #2
 8005002:	58eb      	ldr	r3, [r5, r3]
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	00b3      	lsls	r3, r6, #2
 800500c:	58eb      	ldr	r3, [r5, r3]
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	080050e8 	.word	0x080050e8
 8005018:	080050e8 	.word	0x080050e8
 800501c:	080050ec 	.word	0x080050ec
 8005020:	080050e8 	.word	0x080050e8

08005024 <_init>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr

08005030 <_fini>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr
